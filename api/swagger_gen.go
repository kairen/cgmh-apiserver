// Code generated by go-bindata.
// sources:
// api/swagger-spec/v1.yml
// DO NOT EDIT!

package swagger

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _apiSwaggerSpecV1Yml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\x6d\x73\xda\x3a\x16\xfe\xce\xaf\x38\x93\xee\x0c\xbb\x33\x17\x30\x90\xf4\x85\x4f\xcd\x26\x69\x4b\x37\x4d\x33\x97\xa4\xbb\x33\x3b\x3b\x3b\xb2\x7d\x30\xba\xb1\x25\x5f\x49\x0e\x97\xde\xd9\xff\xbe\x23\xf9\x1d\x0c\x18\x4a\x42\x92\xc2\x87\x16\x5b\x3a\x7a\x39\xe7\x39\x8f\xce\x91\x44\xe4\x94\x78\x1e\x8a\x01\x34\x7b\x6d\xab\xd9\xa0\x6c\xcc\x07\x0d\x00\x17\xa5\x23\x68\xa8\x28\x67\x03\x38\xfb\xf8\xe5\x13\x7c\xe0\x22\x90\x70\x7a\x3d\x6c\x00\xdc\xa3\x90\xa6\xa4\xdb\xb6\xda\x56\x03\x40\x51\xe5\x63\x45\x45\x85\x22\x90\x5f\xc7\x23\x14\xf7\xd4\xc1\x01\x4c\x94\x0a\x07\x9d\x8e\xcf\x1d\xe2\x4f\xb8\x54\x0d\x00\x87\x33\x45\x1c\xa5\x3b\x05\xc0\x80\x50\x7f\x00\x77\x33\x1f\xdb\xf6\x7b\xca\xa6\x94\x49\x45\x9c\xbb\xb6\xc3\x83\x06\x80\x4f\x1d\x64\x12\xe3\xba\x8c\x04\x38\x80\xd3\x90\x38\x13\x84\x9e\x19\x06\x40\x24\xfc\xac\x97\xe9\x74\xda\x26\xa6\xb8\xcd\x85\xd7\x49\x84\x65\xe7\x72\x78\x76\x71\x35\xba\x68\xf5\xda\x56\x7b\xa2\x02\xbf\xa1\x47\x32\x80\x7c\x50\x8a\x78\x72\xd0\x68\xa5\x3d\x44\x6a\x32\xaf\x91\x5b\x89\xc2\x14\x20\x53\xd4\x21\xfa\xa5\x99\x71\x2a\xa3\xcb\xab\x65\x0a\x95\x2e\xf1\x1e\xfd\xca\x5a\xa6\xa4\x54\xf7\x9a\x53\xa6\x2a\xeb\x9a\x92\xc5\xba\x97\xdc\x5b\x51\xfd\x92\x7b\x25\x11\x6d\xb3\xca\xea\xba\xc0\xd4\x7c\xa5\xff\x85\x91\x33\xc1\x00\x65\x43\xc6\xff\x6b\x25\x69\x65\x37\x42\xa2\x26\x52\x9b\xe5\xa8\x43\x22\x35\xe9\xf8\xdc\xa3\xec\x28\xb6\x53\xa8\xb5\x6b\xbe\x01\xc4\x9a\x8d\xbf\xb7\x52\xcd\xea\x8f\x8c\x82\x80\x88\xd9\x00\x9a\xa6\x5b\x23\xdf\x4c\xca\x1c\xce\x64\x64\x7a\x4b\x05\x49\x18\xfa\x89\xda\x3b\xbf\x49\xce\x92\x82\x50\x70\x37\x72\xea\x54\x24\x82\x04\xa8\x50\x14\xaa\x52\x36\x00\x9b\xbb\xb3\xe4\x45\x8a\xaf\xd2\x2b\x81\xbf\x47\x54\xa0\x3b\x00\x25\x22\xcc\x5e\x1b\x6d\x90\x41\xf6\x0c\x70\xf4\x17\x81\xe3\xa3\x01\x1c\xbd\xea\xb8\x38\xa6\x8c\xea\x11\xc8\x44\x2d\x8d\xb4\x31\x19\x72\x0d\xc8\x5c\xb0\xd9\xb3\xac\x66\xb1\x9d\x92\x41\x9a\xa3\xc8\x71\x50\xca\x66\xa1\xc2\x62\xd7\x00\x6a\x16\xe2\x00\xb8\xfd\x1b\x3a\xaa\x54\x10\x0a\x1e\xa2\x50\xb4\xd8\x65\xfc\x09\x50\x4a\xe2\xe1\xfc\xeb\xb4\x2d\xa9\x04\x65\xde\x42\x21\xfe\x41\x82\x50\xfb\x7d\xf3\xeb\x5d\x73\xae\xd4\xe1\xee\xd2\xe6\x28\x53\xe8\x19\x07\x59\xd2\x5e\xcf\xb2\xe6\x0a\x5d\xa2\xc8\xb2\xe6\x2a\x66\xba\x7a\xb6\x46\x94\xdf\x21\xab\x2a\x58\x33\xe7\xf2\xbc\x71\xf6\x79\x62\x7f\x74\xe8\x57\xfa\x79\x78\xfb\x7d\xd8\xbd\xa2\x43\x39\x64\xbf\x9e\x38\x67\xc3\xd7\xc3\xbb\xf0\x5f\xdf\xce\x3e\xbf\x6b\xe3\xec\xb3\x6f\xff\xf3\x43\x68\xe7\x3a\x6a\x1e\xaf\x34\xf4\x90\xdd\x13\x9f\xba\x70\xa1\xe9\x10\xb8\x80\x6b\x22\xe5\x94\x0b\xb7\xd4\x42\x7f\x45\x0b\xc6\x8b\x18\x57\x40\x1c\x45\xef\x89\xc2\xa2\xe8\xc9\x9a\xce\x15\x0a\x46\x7c\xd0\xac\x8d\x02\x2e\x84\xe0\xa2\x99\xfb\xb6\x40\x8f\x4a\x85\x62\x3b\xf7\xfe\x35\x91\x06\x86\x53\x88\x24\x8a\x97\xe7\xe5\x99\x82\x0e\x8e\xbe\x89\xa3\xd7\xf4\x89\x6b\x32\xf3\x39\xd9\x25\x9c\x25\xaa\x14\xcb\xd1\x66\x50\x96\xa8\x40\x4d\xd0\xe0\x18\xc2\x39\x1f\x7d\x49\x80\xd6\x2a\x7a\x79\x68\xe6\x77\x7b\xc6\x32\xa6\xfc\xce\x7d\x77\x01\x3f\x3f\x8c\xec\x31\x17\x0e\x6e\x0c\x6f\x74\x22\x41\xd5\x2c\xef\xb6\x05\x7f\x47\x22\x50\xe8\x4a\x03\xf8\xf7\xa9\x1b\x50\xf6\x9f\x05\x67\xf8\xa0\x3b\x03\xf1\xb3\xb8\x44\x41\xb7\x07\xbf\xd8\x7b\x30\x97\xe2\x6c\x17\xf1\xdc\x96\xa1\xda\xc3\xb9\x72\x48\x3b\xf7\xdd\x8e\xf6\xa7\xc4\x8d\x3d\x5c\xe2\xc6\x49\xd6\x09\x25\xc7\xbc\xa4\x52\x01\xf1\x7d\xe3\x91\x19\xd8\x36\x73\xf3\x8d\xb1\x9d\x40\xfb\x80\xec\x42\x73\x44\x08\x32\x5b\x28\xa3\x0a\x83\x4a\x4c\x2f\x21\x1e\x83\x83\x22\x38\xbb\xab\xb2\x00\xa6\x17\x02\x2e\xe8\xf7\x5d\xc4\xff\x2b\x16\x90\x4a\xe4\xdd\x86\x2e\x51\x58\x0a\xf2\xab\xe8\x3a\x66\x67\xad\xb9\x6c\x48\x0b\x0c\xfe\xa3\x74\x5d\xd4\xda\xc6\x60\xfe\xfa\x8f\x27\x87\xe3\x38\xbf\x9b\x10\x09\x36\x22\x83\xc8\x68\xda\xdd\x4b\x0e\x5e\x17\xa7\xeb\x48\x94\xfa\x55\xb1\xfd\xe3\xe2\xdb\x45\x1f\x15\x6e\x00\xf1\x73\x23\x50\x82\xf8\x5a\x66\x25\x45\x66\x3d\x38\x44\xf2\xd9\xad\x43\xc4\x86\xdc\x8f\x43\x54\x4e\xfe\x59\x38\x40\x29\xd8\xe8\xfc\x19\x45\xd4\xfd\xdf\x36\x31\xc7\x47\x54\x71\xfc\x6f\xcf\x40\x37\x72\x88\x22\x1e\x93\x68\xf7\x84\x17\xa9\x88\x8a\xe4\xba\x4c\xb3\x92\x45\x47\x29\x5e\xe2\x36\xfe\x6a\xf6\x2c\xb1\x63\xfb\xdc\xb9\xfb\xdb\xee\x78\xf5\x31\xf2\x42\x3d\x8d\xff\x26\xaa\xd8\x01\xbd\xd6\x4c\x3e\xce\x89\x22\x4f\x81\x33\x04\xf7\x71\x2b\x04\x14\x42\x45\xd0\x8d\x3c\x43\xa3\x9b\xb9\xff\x5c\x26\xf7\xf1\x1e\xfd\x75\x0b\x44\x7a\xca\x09\xd5\x59\xa9\x69\xa3\x7e\x5a\x4a\x0e\x69\xe9\x93\x4c\x4b\x63\x28\xec\x2b\x6e\x5f\x7e\x06\x55\x8d\xbe\x33\x81\x9a\x6e\x18\x4e\x63\xfc\x19\x05\x3d\x2f\xce\x29\x29\xfc\x65\xf3\xcd\x8a\xc5\xa4\xda\xbc\xc9\x6a\x72\x30\xed\x33\x30\xed\xaa\x94\xbb\xda\xba\x49\xce\x7d\xb0\xee\xe3\x59\xf7\xd8\x3a\x5e\x21\x74\xc5\x15\x7c\xe0\x11\xdb\x65\x68\x11\x72\xca\x54\xe7\x4f\x1d\x59\xe5\x49\xe8\x52\x1a\x48\x6f\x47\x41\x15\x0d\x98\xa6\x0c\x50\x4c\x3e\xaa\x43\x4c\xea\x3e\x2f\xcc\x98\x29\x3c\x33\xcc\xec\x04\x01\x3e\xf7\xd6\xc5\x97\x85\xdb\x6e\x50\x1d\x62\xc6\x00\xf0\xb9\x27\x57\x6d\x43\x6b\x3b\xfe\x1e\xa1\x98\x37\xa4\x06\xcc\xed\xed\xf0\x3c\x7b\x5d\x19\xd2\x95\x67\x67\xda\xc9\xd0\x16\x45\x39\xde\x0e\x21\x6b\x65\x6b\xfb\x08\x59\xc3\x04\x38\xfb\xde\x3c\x19\x73\x11\xac\x03\x79\x72\x3f\x13\xaa\x01\xae\x5b\x38\x60\xbb\xf0\xf9\xe9\xb1\x6d\x30\xb5\xb7\x68\x7d\x69\x36\x56\x09\xe3\x24\x19\x23\x06\xc6\xfb\x3e\x28\x2c\x2a\xee\x45\x9c\x8b\x98\x0b\xdc\xd9\xb9\x88\x63\x74\xfd\xa4\x0e\x0a\x17\xa0\xfa\xf4\xcf\x49\x56\x44\xa2\x95\x08\x4f\x02\xd1\x03\xc2\x1f\x01\xe1\x4f\xf0\x28\xfc\x59\x22\x7c\x55\x5e\x5e\x09\xf2\x24\x2d\x2f\x83\xfc\x79\x1c\x86\xbf\x70\x97\x38\x1c\x86\x6f\xee\x02\xaf\xe0\x0b\x77\xd1\x87\xf3\x1c\x26\x8d\x02\x64\x74\x7b\xe6\xc7\x3c\x71\xc3\x0b\xb3\xcc\x10\x69\x9e\x5a\xf1\xed\xc0\xe4\x7b\x7a\x39\x30\x5e\x48\x16\x30\x10\xff\x04\x6e\x75\x44\x9e\x99\x41\xc7\xe0\xef\x15\x4a\x95\xfc\x40\x0e\x2a\x2f\x43\xae\x6e\x23\x7c\x2f\xe5\xd4\x32\xe3\x31\x17\x5a\xb7\x98\x12\xf7\xdd\xeb\xe2\xac\x5a\xc0\x70\x7a\xfd\xc0\xf3\x2c\x74\xba\xc5\x54\xf5\xa7\x30\xc8\xba\x2d\x58\x21\x32\xa9\xde\x3b\x3a\x43\xc8\xef\x00\x6f\xac\xb2\x1d\xab\x23\xfd\xc5\xc9\x8f\xa2\x31\xa6\xdb\xe4\x2b\xf1\x90\x39\xb3\xe4\x21\x62\x54\xa5\x12\x5c\x1a\x27\x48\x1f\x27\x9c\xe1\x2e\x26\xa5\xe7\xb3\x43\x2c\x43\x9a\xe5\xd6\x14\xfd\xcc\x27\xe9\xa5\xf2\x78\xe6\x75\x05\xcf\x3e\x7e\xf9\x94\xbc\xd5\x5a\xca\xc4\xaa\xa4\x32\xa1\xd3\x21\x28\x24\xe9\x34\x7f\xe3\xf6\x8d\xf9\x05\x6d\x2d\x59\x64\x1e\x65\x2c\x63\x67\x63\x80\xda\xf8\x7d\xd7\xed\xf5\x8f\x4f\x5e\xbf\x79\xdb\x00\x03\xa3\x25\x90\x59\xb4\xa5\xce\xf4\xd7\xf4\xa2\xd7\x51\xa2\x06\xc5\x3b\x3f\x45\xd0\x5a\x96\x65\x75\xb3\xf7\x25\x1a\x26\x91\xe2\xe0\x21\x43\x22\x74\xa4\x6c\xcf\x40\x1a\x3a\xde\x15\x8e\x0e\x40\x58\x09\x04\xfd\x31\xe7\x12\x75\xa5\xe3\x1f\x28\xa7\xc6\x34\x3b\x69\xf3\xa2\xf3\x21\x44\x26\x7b\x62\x65\xb1\x83\xe0\x7e\xed\x01\x9b\x0b\xe9\xa9\x5d\xcc\x05\xa1\x79\x49\x9b\x73\xbf\x02\x0e\x71\x48\x58\x66\x92\x3a\x78\x4f\xf6\xc6\x1e\x0c\xf3\xa7\xab\x31\x2f\xd1\x11\xb8\xa0\xd5\x65\xda\x71\xec\xf1\x71\xb7\x7f\xfc\xc6\xb6\xbb\xef\xde\xbc\x1d\xbf\x1e\xf7\x7b\xd6\xdb\x37\x76\xcf\x19\x5b\x5d\xec\x9f\x74\x13\x6f\x4f\xae\x26\x3d\x1b\x25\x6c\x61\x68\xfd\x31\x37\xc7\xea\x49\x8d\x89\x2f\x31\xd5\x4e\x8e\xc7\x67\xa0\x9b\x4d\x38\x2d\x75\x9e\x82\x93\xaf\x8d\x12\x0a\xa1\x80\x17\x46\xc9\x37\x37\xd9\x9c\x5c\x54\xc7\x76\xab\xc3\x9a\x55\xc0\xb5\xb7\x98\x6c\xf3\xf2\xe2\xdb\xc5\x25\xf4\xd3\x1c\xc0\x0b\xa3\xda\xe4\x94\xe7\x35\x2e\x59\x20\xfe\xa5\x52\xdd\x5c\xaa\x30\x9f\xba\xc3\xbd\xd2\x8a\xf1\xb3\x4b\xe4\x05\x36\x5d\x6b\x23\x93\x3e\x67\x3b\xf8\x2d\xe3\x2f\x79\x64\x96\x9d\x8a\xb6\x40\xd1\x60\x59\x90\xf6\xb0\x86\xcb\x46\x58\x3b\xb6\x2d\x7a\x44\x3c\x9f\xda\x76\xb0\xaa\x87\x77\x64\x01\x95\x20\x23\x3b\x56\xc9\x2f\xd0\xd5\xcf\xc4\x75\xa1\x74\xb0\xba\xd9\x32\x96\xdb\x5c\xeb\xb6\xb6\xb1\x7b\x56\xf7\x6d\xcb\x7a\xd7\xea\x9d\xdc\x74\xbb\x83\x7e\x7f\x70\xfc\xb6\x6d\x59\x56\xb3\x7a\xe4\xc3\xd1\xd7\x73\xa2\x30\x45\xc5\x25\xf7\x6a\xd3\xd3\x13\x33\xab\x11\x98\x0f\xcb\x6a\x52\xe8\xca\x34\xf0\x00\x91\x14\x22\xda\xa0\x35\x79\x83\x4f\x19\x8a\xdb\xe2\xe9\x9f\xe6\x0e\x07\xa5\xbc\xa1\x19\xeb\x0b\x24\x32\x23\x93\xc2\x6a\x90\x67\x7c\xe5\x54\xd2\x99\x10\xe1\x65\x95\x04\xd7\xbd\x5f\xe5\x62\x54\xd8\x57\x51\x60\x27\x8a\x6a\xc1\x38\x62\x2e\x65\xde\x88\x47\xc2\x99\x93\x1a\x39\x13\x74\x23\x3f\x7d\xab\x04\xa1\x8c\x32\xcf\x6c\xc9\x94\xea\x97\x4a\xce\xa9\xbc\x1b\xd1\xef\xf3\x65\x17\xec\x9e\x0a\xce\x02\xcc\xc8\x90\x45\xc1\xc7\xeb\x5b\x99\x3c\xf9\x84\x79\x11\xc9\x06\x8e\x7f\x84\xe8\xa8\x9b\x7d\xf1\x65\xc9\x32\xbb\x0b\x2d\x72\xe3\x3e\x38\x0c\x61\x69\xdc\xb6\x34\x17\x59\xe5\x93\x02\x35\x22\x12\x87\xa4\x2c\x6e\xf9\x17\xe8\x19\xff\x34\x0f\xf9\xd6\xad\xc6\x6b\xed\xf9\xdd\x4c\x30\xc5\x1b\x30\xcc\xb7\x0c\x37\x0a\x35\x74\xb2\x98\x9d\xe8\xfc\x50\xfe\xb5\xf1\x06\x50\x77\x9e\x09\x63\xff\x9b\x6f\x62\x6e\xef\xb5\x7a\xd3\x39\x06\x7d\xd5\xbe\x75\xd5\x4e\x70\x4e\x70\x27\xa5\x6d\x60\xe2\xa8\x88\xf8\x9b\xb7\x92\x27\x84\x05\xd6\xa8\x6d\x02\xf3\x47\xc7\xae\x63\xc1\xd4\x14\x19\xd7\xd4\x6d\x85\x0a\xbb\xe0\x2d\x25\x6a\x5a\xdb\x44\x10\x92\x78\x20\x9f\xbe\x7c\x6a\x96\x27\x92\x12\xd9\x56\x46\x91\x8a\x08\xa5\x9d\xaa\x4a\xa3\x15\x67\x00\x29\x1d\xb8\xb9\x1f\xce\xeb\x2a\xf5\x69\xab\x5b\x3c\x0d\x40\xe6\x3e\x4c\x37\xfd\x8c\x2d\x02\x4d\xd0\xa7\xc2\x99\x50\x85\x8e\x8a\xc4\x06\xe6\xbd\xba\x2a\x35\x72\x49\x66\x8b\x66\x5d\xba\x04\xf7\x53\x5a\x95\xb5\x3b\xbc\xb5\x23\xa6\x22\xe8\xbe\x6e\x5b\xc7\x85\x14\xc2\x2c\x31\xf5\x63\xfa\x6f\xc3\xf3\xe1\x29\xdc\xa0\xf4\x09\x7c\xeb\xe6\xb4\x89\x21\x77\x26\x1b\xf1\x70\x57\xa7\x22\xd0\x87\x09\x8f\x44\xa9\x15\xbd\xd6\xad\x57\x44\x40\xe2\x5d\x97\xe4\x95\x4d\x54\x5d\xc9\x39\x15\x56\xac\xc2\x1b\x71\x2d\x1f\x8f\xa9\x43\x7c\x08\x89\x87\xe0\xf2\x29\x2b\x1e\xee\x54\x2e\xe4\xdb\xe4\x5f\x44\x91\x1b\x5d\xb9\xee\xc8\x86\x01\xf1\xb0\x7a\x14\xa5\x03\xad\x75\x23\xe8\xe5\x24\x56\x11\x78\xd4\x57\x14\x32\xc9\xc5\xd8\xe7\xd3\x6c\x39\x8a\x83\x95\x1a\x86\x8e\x69\xa8\x37\x37\x8a\x8d\xb4\x31\x8a\x42\x14\xf7\x54\xe6\xab\x61\x1a\x1d\xd5\x6e\xe2\x7a\xa6\x26\x3c\x5b\x13\xf3\x68\xea\xc9\x51\xe0\xf1\xa3\x50\x60\xf7\x75\xb3\xf1\x0a\xce\x78\x10\x72\x86\x4c\xc9\x86\x93\x7d\xd5\x9d\xa5\x07\xe4\xa3\xf4\x0f\x2a\x42\xf1\x7c\xbc\x51\x1c\x87\xf9\x43\x8b\x89\x5a\x4c\xed\x01\xd8\xa6\x6a\xa3\xf1\xff\x00\x00\x00\xff\xff\x7c\x5e\xe8\xef\xc5\x53\x00\x00")

func apiSwaggerSpecV1YmlBytes() ([]byte, error) {
	return bindataRead(
		_apiSwaggerSpecV1Yml,
		"api/swagger-spec/v1.yml",
	)
}

func apiSwaggerSpecV1Yml() (*asset, error) {
	bytes, err := apiSwaggerSpecV1YmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "api/swagger-spec/v1.yml", size: 21445, mode: os.FileMode(420), modTime: time.Unix(1543306190, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"api/swagger-spec/v1.yml": apiSwaggerSpecV1Yml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"api": &bintree{nil, map[string]*bintree{
		"swagger-spec": &bintree{nil, map[string]*bintree{
			"v1.yml": &bintree{apiSwaggerSpecV1Yml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

