// Code generated by go-bindata.
// sources:
// api/swagger-spec/v1.yml
// DO NOT EDIT!

package swagger

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _apiSwaggerSpecV1Yml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\xeb\x73\xe2\x38\x12\xff\xce\x5f\xd1\x95\xb9\x2a\xee\xaa\x36\x60\x48\x32\x0f\x3e\x4d\x2e\xc9\x64\x98\xcb\x24\xa9\x25\x99\xbb\xaa\xab\xab\x2d\xd9\x6e\x8c\x26\xb6\xe4\x95\xe4\xb0\xcc\xd6\xfd\xef\x5b\x92\xdf\x60\xc0\x30\x24\xe4\x01\x1f\x66\xc0\x52\xb7\xa4\xee\x5f\xff\xd4\x7a\x38\x72\x4c\x3c\x0f\x45\x0f\x9a\xdd\x96\xd5\x6c\x50\x36\xe4\xbd\x06\x80\x8b\xd2\x11\x34\x54\x94\xb3\x1e\x9c\x9c\x7f\xfd\x0c\x9f\xb8\x08\x24\x1c\x5f\xf7\x1b\x00\xf7\x28\xa4\x29\xe9\xb4\xac\x96\xd5\x00\x50\x54\xf9\x58\x51\x51\xa1\x08\xe4\xd5\x70\x80\xe2\x9e\x3a\xd8\x83\x91\x52\x61\xaf\xdd\xf6\xb9\x43\xfc\x11\x97\xaa\x01\xe0\x70\xa6\x88\xa3\x74\xa3\x00\x18\x10\xea\xf7\xe0\x6e\xe2\x63\xcb\xfe\x48\xd9\x98\x32\xa9\x88\x73\xd7\x72\x78\xd0\x00\xf0\xa9\x83\x4c\x62\x5c\x97\x91\x00\x7b\x70\x1c\x12\x67\x84\xd0\x35\xdd\x00\x88\x84\x9f\xb5\x32\x1e\x8f\x5b\xc4\x14\xb7\xb8\xf0\xda\x89\xb0\x6c\x5f\xf4\x4f\xce\x2e\x07\x67\xfb\xdd\x96\xd5\x1a\xa9\xc0\x6f\xe8\x9e\xf4\x20\xef\x94\x22\x9e\xec\x35\xf6\xd3\x16\x22\x35\x9a\xb6\xc8\xad\x44\x61\x0a\x90\x29\xea\x10\xfd\xd0\x8c\x38\x95\xd1\xe5\xd5\x32\x85\x4a\x17\x78\x8f\x7e\x65\x2d\x53\x52\xaa\x7b\xcd\x29\x53\x95\x75\x4d\xc9\x6c\xdd\x0b\xee\x2d\xa8\x7e\xc1\xbd\x92\x88\xf6\x59\x65\x75\x5d\x60\x6a\xbe\xd1\xff\xc2\xc0\x19\x61\x80\xb2\x21\xe3\xff\xb5\x91\xb4\xb1\x1b\x21\x51\x23\xa9\xdd\xb2\xd7\x26\x91\x1a\xb5\x7d\xee\x51\xb6\x17\xfb\x29\xd4\xd6\x35\xdf\x00\x62\xcb\xc6\xdf\xf7\x53\xcb\xea\x8f\x8c\x82\x80\x88\x49\x0f\x9a\xa6\x59\x23\xdf\x4c\xca\x1c\xce\x64\x64\x5a\x4b\x05\x49\x18\xfa\x89\xd9\xdb\xdf\x25\x67\x49\x41\x28\xb8\x1b\x39\x75\x2a\x12\x41\x02\x54\x28\x0a\x55\x29\xeb\x81\xcd\xdd\x49\xf2\x20\xc5\x57\xe9\x91\xc0\xdf\x23\x2a\xd0\xed\x81\x12\x11\x66\x8f\x8d\x35\x48\x2f\xfb\x0d\xb0\xf7\x37\x81\xc3\xbd\x1e\xec\xbd\x69\xbb\x38\xa4\x8c\xea\x1e\xc8\xc4\x2c\x8d\x54\x99\x0c\xb9\x06\x64\x2e\xd8\xec\x5a\x56\xb3\xa8\xa7\xe4\x90\xe6\x20\x72\x1c\x94\xb2\x59\xa8\x30\xdb\x34\x80\x9a\x84\xd8\x03\x6e\x7f\x47\x47\x95\x0a\x42\xc1\x43\x14\x8a\x16\x9b\x8c\x3f\x01\x4a\x49\x3c\x9c\x7e\x9c\xea\x92\x4a\x50\xe6\xcd\x14\xe2\x1f\x24\x08\x75\xdc\x37\xaf\xee\x9a\x53\xa5\x0e\x77\xe7\xaa\xa3\x4c\xa1\x67\x02\x64\x8e\xbe\xae\x65\x4d\x15\xba\x44\x91\x79\xea\x2a\x46\xba\x78\xb4\x46\x94\xdf\x21\xab\x2a\x58\x32\xe6\xf2\xb8\x71\xf2\x65\x64\x9f\x3b\xf4\x8a\x7e\xe9\xdf\xfe\xe8\x77\x2e\x69\x5f\xf6\xd9\xaf\x47\xce\x49\xff\x6d\xff\x2e\xfc\xcf\xb7\x93\x2f\x1f\x5a\x38\xf9\xe2\xdb\xff\xfe\x14\xda\xb9\x8d\x9a\x87\x0b\x1d\xdd\x67\xf7\xc4\xa7\x2e\x9c\x69\x3a\x04\x2e\xe0\x9a\x48\x39\xe6\xc2\x2d\x69\x38\x58\xa0\xc1\x44\x11\xe3\x0a\x88\xa3\xe8\x3d\x51\x58\x14\x3d\x5a\xd2\xb8\x42\xc1\x88\x0f\x9a\xb5\x51\xc0\x99\x10\x5c\x34\xf3\xd8\x16\xe8\x51\xa9\x50\xac\x17\xde\xbf\x26\xd2\xc0\x70\x0c\x91\x44\xf1\xf2\xa2\x3c\x33\xd0\x2e\xd0\x57\x09\xf4\x9a\x31\x71\x4d\x26\x3e\x27\x9b\x84\xb3\x44\x95\x62\x39\x5a\x0d\xca\x12\x15\xa8\x11\x1a\x1c\x43\x38\x15\xa3\x2f\x09\xd0\xda\x44\x2f\x0f\xcd\xfc\x6e\xcb\x58\xc6\x94\xdf\xb9\xef\xce\xe0\xe7\xa7\x91\x3d\xe4\xc2\xc1\x95\xe1\x8d\x4e\x24\xa8\x9a\xe4\xcd\xee\xc3\x3f\x91\x08\x14\xba\x52\x0f\xfe\x7b\xec\x06\x94\xfd\x6f\x26\x18\x3e\xe9\xc6\x40\xbc\x96\x90\x28\xd8\x76\x17\x17\x5b\x4f\xe6\x52\x9c\x6d\x22\x9f\x5b\x33\x55\x7b\xb8\x50\x0e\x69\xfb\xbe\xd3\xd6\xf1\x94\x84\xb1\x87\x73\xc2\x38\x59\x75\x42\x29\x30\x2f\xa8\x54\x40\x7c\xdf\x44\x64\x06\xb6\xd5\xc2\x7c\x65\x6c\x27\xd0\xde\x21\xbb\xa0\x8e\x08\x41\x26\x33\x65\x54\x61\x50\x89\xe9\x39\xc4\x63\x70\x50\x04\x67\x67\xd1\x2a\x80\xe9\x89\x80\x0b\xfa\x63\x13\xf9\xff\x82\x09\xa4\x12\x79\xb7\xa1\x4b\x14\x96\x92\xfc\x2a\xba\x8e\xd9\x59\x5b\x2e\xeb\xd2\x0c\x83\xff\x2c\x5d\xeb\x3e\xfc\xa6\x57\x2a\x6b\xb3\xf5\xd5\xbf\x9e\x1c\x98\xe3\x45\xde\x88\x48\xb0\x11\x19\x44\xc6\xdc\xee\x56\x16\xe2\x75\xc1\xba\x8c\x49\xa9\x5f\x95\xe0\x3f\x2e\xc8\x5d\xf4\x51\xe1\x0a\x38\x3f\x35\x02\x25\x9c\x2f\xa5\x57\x52\xa4\xd7\x07\x8f\x8a\xb5\xd0\x19\x45\xb4\x62\x42\xad\x07\xcd\xc8\xb2\x2c\xab\xf3\x92\x62\x8d\x6f\x75\xe1\xbb\xfd\xb8\x28\x25\x22\xed\x3f\x35\x38\xfe\xbf\x4e\x3e\x72\x8e\x2a\x5e\x1b\xd8\x13\x83\xb0\x5d\x86\xf1\x98\xfc\xbb\x25\xbc\x48\x45\x54\x24\x97\xad\x42\x2b\xc9\x75\x90\xe2\x25\xd6\xf1\x77\xb3\x9f\x89\x6d\xdb\xe7\xce\xdd\x3f\x36\x47\xb7\x8f\xb1\x66\x34\x49\x48\x62\x8a\x0d\x50\x63\xcd\x85\xc9\x29\x51\xe4\x29\x70\x86\xe0\x3e\xae\x85\x80\x42\x1a\x09\x5a\xc9\x33\x74\xba\x19\xfb\xeb\x73\xb9\x8f\xf7\xe8\xff\xb4\xcf\x8d\x96\x67\xe8\xf4\x78\xf4\xaf\xcb\xeb\x45\x8f\xcf\x4d\x0b\xd2\x73\x6f\xa8\xde\xa7\x30\x3a\xea\x6f\x54\x90\xdd\x46\xc5\x93\xdc\xa8\x28\xc1\xff\xf1\x77\x2a\xe6\x9e\x4a\x56\xa3\xef\x44\xa0\x26\x1c\x86\xe3\x18\x7f\xc6\x40\xcf\x8b\x74\x5e\x11\xdf\x2c\x98\x4e\xaa\xdd\x9b\xcc\x27\x3b\xd7\x3e\x03\xd7\x2e\xda\x7f\xa9\xf6\x6e\xb2\x01\xb3\xf3\xee\xe3\x79\xf7\xd0\x3a\x5c\x20\x74\xc9\x15\x7c\xe2\x11\xdb\x64\x6a\x11\x72\xca\x54\xfb\x4f\x9d\x5a\xe5\x5b\x0f\x73\x69\x20\xbd\x2f\x07\x55\x34\x60\x54\x19\xa0\x98\x5d\x08\x9d\x64\x52\xf7\x79\x61\xc6\x0c\xe1\x99\x61\x66\x23\x08\xf0\xb9\xb7\x2c\xbf\x2c\xdc\x7f\x84\xea\x14\x33\x06\x80\xcf\x3d\xb9\xe8\x60\x42\xfb\xf1\xf7\x08\xc5\xb4\x23\x35\x60\x6e\x6f\xfb\xa7\xd9\xe3\xca\x94\xae\x3c\x3a\xa3\x27\x43\x5b\x14\xe5\x78\xdb\xa5\xac\x95\xda\xb6\x91\xb2\x86\x09\x70\xb6\xbd\x65\x36\xe4\x22\x58\x06\xf2\xe4\xc6\x2e\x54\x03\x5c\x6b\xd8\x61\xbb\xf0\x79\xf5\xd8\x36\x98\xda\x5a\xb6\x3e\x77\x35\x56\x09\xe3\x64\x31\x46\x0c\x8c\xb7\x7d\x74\x5c\x34\xdc\x8b\x38\xc9\x32\x57\xfa\xb3\x53\x63\xc7\xd8\xfa\x49\x9d\x1a\xcf\x40\xf5\xe9\x9f\x8e\x2d\xc8\x44\x2b\x11\x9e\x24\xa2\x3b\x84\x3f\x02\xc2\x9f\xe0\xbd\x88\x67\x89\xf0\x45\xeb\xf2\x4a\x90\x27\xcb\xf2\x32\xc8\x9f\xd8\xcd\x88\xd7\x19\x12\xb1\x2b\xb7\x13\x12\x95\x83\x7f\x06\x21\xf0\x06\xbe\x72\x17\x7d\x38\xcd\x61\xd2\x28\x40\x46\xeb\x33\xaf\x77\xc5\x8a\x67\x46\x99\x21\xd2\xfc\xda\x8f\xef\x8b\x26\xdf\xd3\xeb\xa2\xf1\x44\x32\x83\x81\xf8\xa5\xc8\xc5\x19\x79\x7e\xf3\x46\xa2\xf8\xa8\x50\xaa\xe4\x95\x49\xa8\xbc\x1e\xbb\x58\x47\xf8\x51\xca\xb1\x65\xfa\x63\xae\x38\xaf\x31\x24\xee\xbb\xd7\xc5\x51\xed\x03\xc3\xf1\xf5\x03\x8f\xb3\xd0\xe8\x1a\x43\xd5\x9f\x42\x27\xeb\x6a\xb0\x42\x64\x52\x7d\x74\xf4\x0a\x21\xbf\x15\xbe\xb2\xc9\x36\x6c\x8e\xf4\x1d\xa4\x9f\x45\x63\x4c\xb7\xc9\x57\xe2\x21\x73\x26\xc9\x8f\x88\x51\x95\x4a\x70\x69\x82\x20\xfd\x39\xe2\x0c\x37\x31\x28\x3d\x9e\x0d\x62\x19\xd2\x55\x6e\x4d\xd1\x2f\x7c\x94\xbe\x66\x10\x8f\xbc\xae\xe0\xc9\xf9\xd7\xcf\xc9\x53\x6d\xa5\x4c\xac\x4a\x2a\x13\x3a\xee\x83\x42\x92\x0e\xf3\x3b\xb7\x6f\xcc\x3b\xd5\xb5\x64\x91\x79\x94\xb1\x8c\x9d\x8d\x03\x6a\xe3\xf7\x43\xa7\x7b\x70\x78\xf4\xf6\xdd\xfb\x06\x18\x18\xcd\x81\xcc\xac\x2f\xcb\x17\x04\x2b\x5b\xd1\xf3\x28\x51\xbd\xe2\x4d\xaf\x79\xb7\x04\xa7\x68\xf8\x38\x52\x1c\x3c\x64\x48\x84\xce\x94\xed\x09\x48\x43\xc7\x9b\xc2\xd1\x0e\x08\x0b\x81\xa0\x3f\xe6\x5c\xa2\xae\x74\xfc\xca\x7a\xea\x4c\xb3\x93\x36\x2d\x3a\x9d\x42\x64\xb2\x47\x56\x96\x3b\x08\xee\xd7\xee\xb0\x79\x45\x21\xf5\x8b\xb9\x16\x36\x2d\x69\x73\xee\x57\xc0\x21\x4f\x09\xcd\x35\xb2\x7a\x52\x43\xe2\x4b\x4c\x42\xe4\xb7\x7c\x43\x63\x17\x27\xaf\x3a\x4e\x62\x34\x94\xe6\xa4\x3a\x88\x48\x76\x59\xb7\x85\x0a\x89\x8e\xc0\x99\xf8\x9c\x37\x60\xc7\x1e\x1e\x76\x0e\x0e\xdf\xd9\x76\xe7\xc3\xbb\xf7\xc3\xb7\xc3\x83\xae\xf5\xfe\x9d\xdd\x75\x86\x56\x07\x0f\x8e\x3a\xa9\x19\xe2\xab\x8d\xcf\xc6\x08\x8f\x4c\x19\x39\xb3\x3d\x03\xdb\xac\x12\xf5\x29\x0d\xe7\x97\xde\x5e\xe4\x30\x9b\xc9\x0c\xa7\xd7\x91\x8b\x46\x39\x9d\x5a\x17\xf2\x67\x2f\x8c\x92\x6f\x6e\xb2\xa3\x3f\x6b\x92\xf5\xa6\x8a\x25\x83\x76\xed\xb5\x06\x7c\xf6\xed\xec\x02\x0e\xd2\x85\x33\x8b\x02\x1b\xc5\xd5\xf0\xfc\xfa\xb6\xf6\xcc\x9e\x6f\x0a\xb8\x64\x66\x36\x98\x2b\xd5\xc9\xa5\x0a\xe3\xaa\xdb\xed\x4b\x6d\x20\x3f\x7b\x1d\xa7\x90\x8a\x2c\xf5\x95\xd9\x7b\xca\x8e\xbf\xf6\x0d\x45\xe4\xcb\x9a\xec\x4a\xc1\x3e\x28\x1a\xcc\x5b\xe1\x3c\xac\x03\xb3\x1e\xd6\x5e\x18\x16\xa3\x23\x1e\x4f\x6d\x3f\x58\xd5\xdd\xdb\xb3\x80\x4a\x90\x91\x1d\x9b\xe4\x17\xe8\xe8\xdf\xc4\x75\xa1\x74\x2b\x61\xb5\x1c\x30\xf7\xb9\xb6\x6d\x6d\x67\x77\xad\xce\xfb\x7d\xeb\xc3\x7e\xf7\xe8\xa6\xd3\xe9\x1d\x1c\xf4\x0e\xdf\xb7\x2c\xcb\x6a\x56\xf7\xbc\x3f\xb8\x3a\x25\x0a\x53\x54\x5c\x70\xaf\x36\x55\x3d\x31\xb7\x1a\x81\xe9\x5c\xad\x26\x9d\x2e\xdc\x43\xd9\x41\x24\x85\x88\x76\x68\x4d\xde\xe0\x63\x86\xe2\xb6\x78\x74\xae\xb9\xc3\x41\x29\x6f\x68\xc6\xfe\x02\x89\xcc\xc8\xa4\x30\x2b\xe4\xdb\x25\xe5\x7d\x18\x67\x44\x84\x97\x55\x12\x5c\xb7\x7e\x99\x8b\x51\x61\x5f\x1a\x46\x4e\x7e\x0f\x23\xe6\x52\xe6\x0d\x78\x24\x9c\x29\xa9\x81\x33\x42\x37\xf2\xd3\xa7\x4a\x10\xca\x28\xf3\xcc\x7e\x66\xa9\x7e\xa9\xe4\x94\xca\xbb\x01\xfd\x31\x5d\x76\xc6\xee\xa9\xe0\x2c\xc0\x8c\x0c\x59\x14\x9c\x5f\xdf\xca\xe4\x97\x4f\x98\x17\x91\xac\xe3\xf8\x47\x88\x8e\xba\xd9\x16\x5f\x96\x3c\xb3\xb9\x34\x23\x77\xee\x83\xc3\x10\xe6\xa6\xaa\x73\x17\x28\x8b\x62\x52\xa0\x46\x44\x12\x90\x94\xc5\x9a\x7f\x81\xae\x89\x4f\xf3\x23\x3f\xf7\xd0\x78\xad\x3d\xbe\x9b\x11\xa6\x78\x03\x86\xf9\x7e\xfb\x4a\x29\x87\x5e\x41\x66\xc7\xa1\x3f\xb5\x79\xb1\xf2\xee\x69\x67\x9a\x09\xe3\xf8\x9b\x56\x31\x75\x70\x51\x7d\x62\x13\x83\xbe\xea\xd0\xa7\xea\x18\x25\x27\xb8\xa3\xd2\x19\x0a\x71\x54\x44\xfc\xd5\xb5\xe4\xbb\x29\x05\xd6\xa8\xed\x02\xf3\x37\x1c\xaf\x63\xc1\xd4\x15\x19\xd7\xd4\xd5\x42\x85\x5d\x88\x96\x12\x35\x2d\x55\x11\x84\x24\xee\xc8\xe7\xaf\x9f\x9b\xe5\x81\xa4\x44\xb6\x96\x53\xa4\x22\x42\xe9\xa0\xaa\xb2\x68\xc5\x01\x5a\x4a\x07\x6e\x1e\x87\xd3\xb6\x4a\x63\xda\xea\x14\x8f\xd2\x90\xb9\x0f\xd3\xcc\x41\xc6\x16\x81\x26\xe8\x63\xe1\x8c\xa8\x42\x47\x45\x62\x05\xf7\x5e\x5e\x96\x94\x5c\x90\xc9\xac\x5b\xe7\x4e\xc1\x07\x29\xad\xca\xda\x0d\xde\xda\x11\x53\x11\x74\xde\xb6\xac\xc3\xb4\x65\x2f\x8c\xcc\x14\x53\x3f\xa7\xff\xd6\x3f\xed\x1f\xc3\x0d\x4a\x9f\xc0\xb7\x4e\x4e\x9b\x18\x72\x67\xb4\x12\x0f\x77\xf4\x52\x04\x0e\x60\xc4\x23\x51\xd2\xa2\xe7\xba\xe5\x86\x08\x48\xbc\x65\x99\x3c\xb2\x89\xaa\x2b\x39\x65\xc2\x8a\x59\x78\x25\xae\xe5\xc3\x21\x75\x88\x0f\x21\xf1\x10\x5c\x3e\x66\xc5\x93\xd1\xca\x89\x7c\x9d\xf5\x17\x51\xe4\x46\x57\xae\xdb\xb3\x7e\x40\x3c\xac\xee\x45\xe9\x34\x78\x59\x0f\xba\x39\x89\x55\x24\x1e\xf5\x0d\x85\x4c\x72\x31\xf4\xf9\xb8\xb0\x8a\xd5\xc9\x4a\x0d\x47\xc7\x34\xd4\x9d\xea\xc5\x4a\xd6\x18\x44\x21\x8a\x7b\x2a\xf3\xd9\x30\xcd\x8e\x6a\xab\xb8\x9e\xa8\x11\xcf\xe6\xc4\x3c\x9b\x7a\x72\x14\x78\xf8\x28\x14\xd8\x79\xdb\x6c\xbc\x81\x13\x1e\x84\x9c\x21\x53\xb2\xe1\x64\x5f\x75\x63\xe9\xed\x92\x41\xfa\xf7\x69\xa1\x78\xb9\xa4\x51\xec\x87\xf9\xbb\xb5\x89\x59\x4c\xed\x1e\xd8\xa6\x6a\xa3\xf1\x57\x00\x00\x00\xff\xff\xef\x99\xae\xed\x14\x59\x00\x00")

func apiSwaggerSpecV1YmlBytes() ([]byte, error) {
	return bindataRead(
		_apiSwaggerSpecV1Yml,
		"api/swagger-spec/v1.yml",
	)
}

func apiSwaggerSpecV1Yml() (*asset, error) {
	bytes, err := apiSwaggerSpecV1YmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "api/swagger-spec/v1.yml", size: 22804, mode: os.FileMode(420), modTime: time.Unix(1543314328, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"api/swagger-spec/v1.yml": apiSwaggerSpecV1Yml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"api": &bintree{nil, map[string]*bintree{
		"swagger-spec": &bintree{nil, map[string]*bintree{
			"v1.yml": &bintree{apiSwaggerSpecV1Yml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

