// Code generated by go-bindata.
// sources:
// api/swagger-spec/v1.yml
// DO NOT EDIT!

package swagger

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _apiSwaggerSpecV1Yml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\x5d\x73\x1a\x3b\xd2\xbe\xe7\x57\x74\x39\x6f\x15\x37\x07\x18\xb0\x9d\x37\x99\xab\x78\x6d\x27\x21\xeb\xd8\xae\x83\x9d\xdd\xaa\xad\xbd\x10\x33\xcd\x8c\xe2\x19\x69\x8e\xa4\x81\x43\xb6\xf6\xbf\x6f\x49\xf3\x0d\x03\x0c\x36\xfe\x3c\x70\x91\x30\x23\x75\x4b\xea\x7e\xba\xf5\xe8\x03\xcb\x19\xf1\x3c\x14\x36\xb4\x07\x5d\xab\xdd\xa2\x6c\xc2\xed\x16\x80\x8b\xd2\x11\x34\x52\x94\x33\x1b\x4e\xbf\x7c\xff\x0a\x9f\xb9\x08\x25\x9c\x5c\x0f\x5b\x00\x53\x14\xd2\x94\xf4\xbb\x56\xd7\x6a\x01\x28\xaa\x02\xac\xa9\xa8\x50\x84\xf2\x6a\x32\x42\x31\xa5\x0e\xda\xe0\x2b\x15\xd9\xbd\x5e\xc0\x1d\x12\xf8\x5c\xaa\x16\x80\xc3\x99\x22\x8e\xd2\x8d\x02\x60\x48\x68\x60\xc3\xdd\x3c\xc0\xee\xf8\x13\x65\x33\xca\xa4\x22\xce\x5d\xd7\xe1\x61\x0b\x20\xa0\x0e\x32\x89\x49\x5d\x46\x42\xb4\xe1\x24\x22\x8e\x8f\x30\x30\xdd\x00\x88\x45\x90\xb7\x32\x9b\xcd\xba\xc4\x14\x77\xb9\xf0\x7a\xa9\xb0\xec\x5d\x0c\x4f\xcf\x2f\x47\xe7\x9d\x41\xd7\xea\xfa\x2a\x0c\x5a\xba\x27\x36\x14\x9d\x52\xc4\x93\x76\xab\x93\xb5\x10\x2b\x7f\xd1\x22\xb7\x12\x85\x29\x40\xa6\xa8\x43\xf4\x4b\x33\xe2\x4c\x46\x97\xd7\xcb\x94\x2a\x5d\xe0\x14\x83\xda\x5a\xa6\xa4\x52\xf7\x9a\x53\xa6\x6a\xeb\x9a\x92\xe5\xba\x17\xdc\x5b\x53\xfd\x82\x7b\x15\x11\xed\xb3\xda\xea\xba\xc0\xd4\x7c\xa7\xff\x85\x91\xe3\x63\x88\xb2\x25\x93\xff\xb5\x91\xb4\xb1\x5b\x11\x51\xbe\xd4\x6e\x39\xe8\x91\x58\xf9\xbd\x80\x7b\x94\x1d\x24\x7e\x8a\xb4\x75\xcd\x37\x80\xc4\xb2\xc9\xf7\x4e\x66\x59\xfd\x91\x71\x18\x12\x31\xb7\xa1\x6d\x9a\x35\xf2\xed\xb4\xcc\xe1\x4c\xc6\xa6\xb5\x4c\x90\x44\x51\x90\x9a\xbd\xf7\x53\x72\x96\x16\x44\x82\xbb\xb1\xd3\xa4\x22\x11\x24\x44\x85\xa2\x54\x95\x32\x1b\xc6\xdc\x9d\xa7\x2f\x32\x7c\x55\x5e\x09\xfc\x23\xa6\x02\x5d\x1b\x94\x88\x31\x7f\x6d\xac\x41\xec\xfc\x19\xe0\xe0\xff\x04\x4e\x0e\x6c\x38\x78\xd7\x73\x71\x42\x19\xd5\x3d\x90\xa9\x59\x5a\x99\x32\x19\x71\x0d\xc8\x42\xb0\x3d\xb0\xac\x76\x59\x4f\xc5\x21\xed\x51\xec\x38\x28\x65\xbb\x54\x61\xb9\x69\x00\x35\x8f\xd0\x06\x3e\xfe\x89\x8e\xaa\x14\x44\x82\x47\x28\x14\x2d\x37\x99\x7c\x42\x94\x92\x78\xb8\xf8\x3a\xd3\x25\x95\xa0\xcc\x5b\x2a\xc4\x3f\x49\x18\xe9\xb8\x6f\x5f\xdd\xb5\x17\x4a\x1d\xee\xae\x54\x47\x99\x42\xcf\x04\xc8\x0a\x7d\x03\xcb\x5a\x28\x74\x89\x22\xab\xd4\xd5\x8c\x74\xfd\x68\x8d\x28\xbf\x43\x56\x57\xb0\x61\xcc\xd5\x71\xe3\xfc\x9b\x3f\xfe\xe2\xd0\x2b\xfa\x6d\x78\xfb\x6b\xd8\xbf\xa4\x43\x39\x64\xbf\x1f\x3b\xa7\xc3\xf7\xc3\xbb\xe8\x9f\x3f\x4e\xbf\x7d\xec\xe2\xfc\x5b\x30\xfe\xc7\xe7\x68\x5c\xd8\xa8\x7d\xb4\xd6\xd1\x43\x36\x25\x01\x75\xe1\x5c\xa7\x43\xe0\x02\xae\x89\x94\x33\x2e\xdc\x8a\x86\xc3\x35\x1a\x4c\x14\x31\xae\x80\x38\x8a\x4e\x89\xc2\xb2\xe8\xf1\x86\xc6\x15\x0a\x46\x02\xd0\x59\x1b\x05\x9c\x0b\xc1\x45\xbb\x88\x6d\x81\x1e\x95\x0a\xc5\xfd\xc2\xfb\xf7\x54\x1a\x18\xce\x20\x96\x28\xde\x5e\x94\xe7\x06\xda\x07\xfa\x36\x81\xde\x30\x26\xae\xc9\x3c\xe0\x64\x97\x70\x96\xa8\x32\x2c\xc7\xdb\x41\x59\xa2\x02\xe5\xa3\xc1\x31\x44\x0b\x31\xfa\x96\x00\xad\x4d\xf4\xf6\xd0\xcc\xef\x9e\x19\xcb\x98\xe5\x77\x1e\xb8\x4b\xf8\x79\x30\xb2\x27\x5c\x38\xb8\x35\xbc\xd1\x89\x05\x55\xf3\xa2\xd9\x0e\xfc\x0d\x89\x40\xa1\x2b\xd9\xf0\xaf\x13\x37\xa4\xec\xdf\x4b\xc1\xf0\x59\x37\x06\xe2\xaf\x12\x12\x25\xdb\xee\xe3\xe2\xd9\xc9\x5c\x86\xb3\x5d\xf0\xb9\x7b\x52\xb5\xc7\x0b\xe5\x88\xf6\xa6\xfd\x9e\x8e\xa7\x34\x8c\x3d\x5c\x11\xc6\xe9\xaa\x13\x2a\x81\x79\x41\xa5\x02\x12\x04\x26\x22\x73\xb0\x6d\x17\xe6\x5b\x63\x3b\x85\xf6\x1e\xd9\x25\x75\x44\x08\x32\x5f\x2a\xa3\x0a\xc3\x5a\x4c\xaf\x48\x3c\x06\x07\x65\x70\xf6\xd7\xad\x02\x98\x9e\x08\xb8\xa0\xbf\x76\xc1\xff\xd7\x4c\x20\xb5\xc8\xbb\x8d\x5c\xa2\xb0\x42\xf2\x37\xc2\x8e\x94\x61\x57\x97\xdc\x93\x5c\xae\xed\x9c\xab\x58\xca\xf7\x0f\x4d\xee\x65\x1b\x6f\x0d\xfd\xab\xbf\xbf\x38\xd4\x27\xab\x41\x9f\x48\x18\x23\x32\x88\x8d\x5f\xdc\x67\x59\xb1\x37\x45\xf5\xa6\x94\x4b\x83\xba\x95\xc0\xd3\x46\x83\x8b\x01\x2a\xdc\x22\x20\xce\x8c\xc0\x3e\x20\x5e\x5a\x40\x24\x8e\x7c\x9e\x80\xa8\x1d\xfc\xab\x08\x80\x9c\x9a\x04\x38\xc5\x60\x13\x37\xc9\x36\xbb\xa1\x9e\x9c\x18\x1d\xcd\xd9\x09\xd9\xb3\x93\x17\xc9\x4e\x12\x28\x3c\x1b\x3d\x59\xb9\x15\x59\x8f\xbe\x53\x81\x9a\xa0\x30\x9c\x25\xf8\x33\x06\xda\x5d\x66\x7e\x92\x13\x85\xb2\xc1\x1f\x92\x9a\x1b\x2e\x73\xce\x4a\x16\x7a\x39\xf4\xb3\xde\xbd\x29\xff\xdc\xbb\xf6\x15\xb8\x76\x1d\x97\xaa\xf7\x6e\x4a\xa6\xf6\xde\x7d\x3a\xef\x1e\x59\x47\x6b\x84\x2e\xb9\x82\xcf\x3c\x66\xbb\xa4\x16\x11\xa7\x4c\xf5\xfe\xa3\xf9\x27\x75\xff\xbb\x69\x1b\x33\x3b\x24\x87\xba\x34\x60\x54\x19\xa0\xc0\x78\x9e\x6c\x4f\x52\xf7\x75\x61\xc6\x0c\xe1\x95\x61\x66\x27\x08\x08\xb8\xb7\x89\x5f\x96\x2e\x3d\x40\x3d\xc5\x4c\x00\x10\x70\x2f\xa7\x99\xab\xfc\xf8\x47\x8c\x62\xd1\x91\x1a\x30\xb7\xb7\xc3\xb3\xfc\x75\x2d\xa5\xab\x8e\xce\xe8\xc9\xd1\x16\xc7\x05\xde\xf6\x94\xb5\x56\xdb\x73\x50\xd6\x28\x05\xce\x33\xb1\xd6\x1c\xe8\x13\x2e\xc2\x4d\x20\x4f\xaf\xe9\x40\x3d\xc0\xb5\x86\x3d\xb6\x4b\x9f\xbf\x3c\xb6\x0d\xa6\x9e\x8d\xad\xaf\x5c\x8d\xd5\xc2\x38\x5d\x8c\x11\x03\xe3\x75\x28\x7e\x8a\x0d\xaf\xb2\xe1\xde\xc4\x86\x97\xb9\xc7\x97\x6f\x78\x39\xc6\xd6\x2f\x6a\x07\x78\x09\xaa\x2f\x7f\x03\x6c\x0d\x13\xad\x45\x78\x4a\x44\xf7\x08\x7f\x02\x84\xbf\xc0\x33\x8e\x57\x89\xf0\x75\xeb\xf2\x5a\x90\xa7\xcb\xf2\x2a\xc8\x5f\xc7\x29\xc7\x1b\x0f\x89\xfd\x29\xc7\xf6\x21\xf0\x0e\xbe\x73\x17\x03\x38\x2b\x60\xd2\x2a\x41\x46\xeb\x33\x77\xba\x13\xc5\x4b\xa3\xcc\x11\x69\x9e\x3a\xc9\x25\x91\xf4\x7b\x76\x47\x24\x99\x48\x96\x30\x90\xfc\x12\x62\x3d\x23\xcf\xdd\xa0\x39\xf8\x27\x85\x52\xa5\xbf\x93\x80\xda\x3b\x31\xeb\x75\x44\x9f\xa4\x9c\x59\xa6\x3f\xe6\x5e\xd3\x3d\x86\xc4\x03\xf7\xba\x3c\xaa\x0e\x30\x9c\x5d\x3f\xf2\x38\x4b\x8d\xde\x63\xa8\xfa\x53\xea\x64\x53\x0d\x56\x84\x4c\xaa\x4f\x8e\x5e\x21\x14\x57\xc1\xb6\x36\xd9\x8e\xcd\x91\x5d\x3c\x7e\x28\x1a\x93\x74\x9b\x7e\x25\x1e\x32\x67\x9e\x3e\xc4\x8c\xaa\x4c\x82\x4b\x13\x04\xd9\xa3\xcf\x19\xee\x62\x50\x7a\x3c\x3b\xc4\x32\x64\xab\xdc\x86\xa2\xdf\xb8\x9f\xdd\x2d\x4c\x46\xde\x54\xf0\xf4\xcb\xf7\xaf\xe9\x5b\x6d\xa5\x5c\xac\x4e\x2a\x17\x3a\x19\x82\x42\x92\x0d\xf3\x27\x1f\xdf\x98\x1f\x52\x35\x92\x45\xe6\x51\xc6\xf2\xec\x6c\x1c\xd0\x18\xbf\x1f\xfb\x83\xc3\xa3\xe3\xf7\xff\xff\xa1\x05\x06\x46\x2b\x20\xb3\xec\x4b\xbd\xd2\xdf\xd0\x8a\x9e\x47\x89\xb2\x4d\xd5\xfc\x65\x25\xdd\x92\x58\x71\xf0\x90\x21\x11\x9a\x11\x8f\xe7\x20\x4d\xda\xdd\x15\x5e\xf6\x0e\x5f\xeb\x70\xfd\x31\xe7\x0f\x4d\xa5\x93\xdf\xa3\xf5\xb3\x86\x39\x65\x6a\x51\x74\x91\x2a\xe4\xb2\xc7\x56\xce\x11\x04\x0f\x1a\x77\xd8\xdc\x3f\xcc\xfc\xe2\x28\x3a\x5d\x92\x1c\x73\x1e\xd4\xc0\x21\xa1\x7e\xa5\xe1\x6d\xcc\x83\xa5\x64\xe7\x45\x71\xfa\xcd\x4d\xb7\x5f\x96\x23\xe0\x51\xf0\xef\x8e\xef\x01\xdd\xf6\xc5\xf9\x8f\xf3\x0b\x38\xcc\x58\x8e\x17\xc5\x8d\xdd\x52\x30\x37\x97\x2c\x41\x7e\xa5\x54\xbf\x90\x2a\x8d\xa7\x69\x77\x2f\xb5\x61\x82\xfc\xfe\x53\x09\x47\x1b\x7d\x64\x16\x08\xf9\x1e\x65\xc7\x40\xa2\x98\x7b\xf2\x73\x9f\x0e\x28\x1a\xae\x9a\x86\x1e\xd7\x71\x79\x0f\x1b\xcf\xde\x96\x65\x59\xfd\x12\xc4\x97\x2d\xb9\xd2\x0f\x56\x7d\xf7\x0e\x2c\xa0\x12\x64\x3c\x4e\x4c\xf2\x1b\xf4\xf5\x33\x71\x5d\xa8\x1c\x1d\x6d\x17\xc0\x85\xcf\xb5\x6d\x1b\x3b\x7b\x60\xf5\x3f\x74\xac\x8f\x9d\xc1\xf1\x4d\xbf\x6f\x1f\x1e\xda\x47\x1f\xba\x96\x65\xb5\xeb\x7b\x3e\x1c\x5d\x9d\x11\x85\x19\x2a\x2e\xb8\xd7\x78\x46\x7a\x61\x6e\x35\x02\x8b\x13\x52\xb6\xc3\xfe\x10\xa2\xbb\x87\x48\x06\x11\xed\xd0\x86\x79\x83\xcf\x18\x8a\xdb\xf2\xf9\x86\xce\x1d\x0e\x4a\x79\x43\xf3\xac\x2f\x90\xc8\x3c\x99\x94\x66\x83\x82\xd3\x56\xc9\xb2\xe3\x13\xe1\xe5\x95\x04\xd7\xad\x5f\x16\x62\x54\x8c\x2f\xe3\x70\x9c\x1a\xaa\x03\x93\x98\xb9\x94\x79\x23\x1e\x0b\x67\x41\x6a\xe4\xf8\xe8\xc6\x41\xf6\x56\x09\x42\x19\x65\x9e\x59\x74\x56\xea\x57\x4a\xce\xa8\xbc\x1b\xd1\x5f\x8b\x65\xe7\x6c\x4a\x05\x67\x21\xe6\xc9\x90\xc5\xe1\x97\xeb\x5b\x99\x3e\x05\x84\x79\x31\xc9\x3b\x8e\x7f\x46\xe8\xa8\x9b\xe7\xca\x97\x15\xcf\xdc\xa7\xa1\x55\x89\x34\x73\xee\xa3\xc3\x10\x56\x52\x93\x95\x2c\x6c\x5d\x4c\x0a\xd4\x88\x48\x03\x92\xb2\x44\xf3\x6f\x30\x30\xf1\x69\x1e\x8a\xcd\x29\x8d\xd7\xc6\xe3\xbb\xf1\x31\xc3\x1b\x30\x2c\x36\x45\xb6\xa2\x1a\x9a\x26\xb7\x77\xc2\x3c\xb7\x5e\xe2\xf6\x17\x33\x61\x12\x7f\x8b\x2a\x16\x76\x97\xea\xb7\xd5\x12\xd0\xd7\xed\xcc\xd5\xed\x75\x15\x09\xee\xb8\xb2\xd1\x45\x1c\x15\x93\x60\x7b\x2d\x05\x15\x2e\x65\x8d\xc6\x2e\x30\x7f\x5d\xe3\x3a\x11\xcc\x5c\x91\xe7\x9a\xa6\x5a\xa8\x18\x97\xa2\xa5\x92\x9a\x36\xaa\x08\x23\x92\x74\xe4\xeb\xf7\xaf\xed\xea\x40\xb2\x44\x76\x2f\xa7\x48\x45\x84\xd2\x41\x55\x67\xd1\x9a\x5d\xce\x2c\x1d\xb8\x45\x1c\x2e\xda\x2a\x8b\x69\xab\x5f\xde\xef\x44\xe6\x3e\x4e\x33\x87\x79\xb6\x08\x75\x82\x3e\x11\x8e\x4f\x15\x3a\x2a\x16\x5b\xb8\xf7\xf2\xb2\xa2\xe4\x82\xcc\x97\xdd\xba\x72\x0a\x3e\xcc\xd2\xaa\x6c\xdc\xe0\xed\x38\x66\x2a\x86\xfe\xfb\xae\x75\x54\x5a\x42\x98\x29\xa6\x39\xa7\xff\x31\x3c\x1b\x9e\xc0\x0d\xca\x80\xc0\x8f\x7e\x91\x36\x31\xe2\x8e\xbf\x55\x1e\xee\xeb\xa5\x08\x1c\x82\xcf\x63\x51\xd1\xa2\xe7\xba\xcd\x86\x08\x49\xb2\xde\x4c\x5f\x8d\x89\x6a\x2a\xb9\x60\xc2\x9a\x59\x78\xab\x5c\xcb\x27\x13\xea\x90\x00\x22\xe2\x21\xb8\x7c\xc6\xca\xdb\xd7\xb5\x13\xf9\x7d\xd6\x5f\x44\x91\x1b\x5d\xb9\x69\xcf\x86\x21\xf1\xb0\xbe\x17\x95\x2d\xfb\x4d\x3d\x18\x14\x49\xac\x86\x78\x34\x37\x14\x32\xc9\xc5\x24\xe0\xb3\x7c\x3a\x4a\xc8\x4a\x03\x47\x27\x69\x68\xb0\xd0\x8b\xad\xac\x31\x8a\x23\x14\x53\x2a\x8b\xd9\x30\x63\x47\x8d\x55\x5c\xcf\x95\xcf\xf3\x39\xb1\x60\x53\x2f\x2e\x05\x1e\x3d\x49\x0a\xec\xbf\x6f\xb7\xde\xc1\x29\x0f\x23\xce\x90\x29\xd9\x72\xf2\xaf\xba\xb1\xec\x08\x70\x94\xfd\xe5\x20\x28\x9f\x00\xb6\xca\xfd\x30\x7f\x51\x28\x35\x8b\xa9\x6d\xc3\xd8\x54\x6d\xb5\xfe\x17\x00\x00\xff\xff\x9a\x0f\x5d\xb9\xae\x4a\x00\x00")

func apiSwaggerSpecV1YmlBytes() ([]byte, error) {
	return bindataRead(
		_apiSwaggerSpecV1Yml,
		"api/swagger-spec/v1.yml",
	)
}

func apiSwaggerSpecV1Yml() (*asset, error) {
	bytes, err := apiSwaggerSpecV1YmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "api/swagger-spec/v1.yml", size: 19118, mode: os.FileMode(420), modTime: time.Unix(1542792703, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"api/swagger-spec/v1.yml": apiSwaggerSpecV1Yml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"api": &bintree{nil, map[string]*bintree{
		"swagger-spec": &bintree{nil, map[string]*bintree{
			"v1.yml": &bintree{apiSwaggerSpecV1Yml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

