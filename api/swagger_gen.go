// Code generated by go-bindata.
// sources:
// api/swagger-spec/v1.yml
// DO NOT EDIT!

package swagger

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _apiSwaggerSpecV1Yml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\x5b\x73\x1a\x3b\x12\x7e\xe7\x57\x74\x39\x5b\xc5\x6e\xd5\x31\x0c\x60\xe7\xc2\x53\xbc\xb6\xe3\x90\x75\x6c\xef\xc1\xce\x6e\xd5\xd6\x56\x4a\x33\xd3\x80\xe2\x19\x69\x22\x69\xcc\x21\x5b\xfb\xdf\x4f\x49\x73\x87\x01\x06\x8c\x8d\x2f\xf8\x21\x61\x46\xea\x96\xd4\xfd\xf5\x45\x2d\x81\x1c\x93\xe1\x10\x45\x17\xea\xed\x86\x55\xaf\x51\x36\xe0\xdd\x1a\x80\x8b\xd2\x11\x34\x50\x94\xb3\x2e\x1c\x9f\x7d\xfd\x0c\x9f\xb8\xf0\x25\x1c\x5d\xf5\x6a\x00\x77\x28\xa4\x69\x69\x35\xac\x86\x55\x03\x50\x54\x79\x58\xd2\x51\xa1\xf0\xe5\xe5\xa0\x8f\xe2\x8e\x3a\xd8\x85\x91\x52\x41\xb7\xd9\xf4\xb8\x43\xbc\x11\x97\xaa\x06\xe0\x70\xa6\x88\xa3\xf4\xa0\x00\xe8\x13\xea\x75\xe1\x76\xe2\x61\xc3\xfe\x48\xd9\x98\x32\xa9\x88\x73\xdb\x70\xb8\x5f\x03\xf0\xa8\x83\x4c\x62\xd4\x97\x11\x1f\xbb\x70\x14\x10\x67\x84\xd0\x36\xd3\x00\x08\x85\x97\x8e\x32\x1e\x8f\x1b\xc4\x34\x37\xb8\x18\x36\x63\x62\xd9\x3c\xef\x1d\x9f\x5e\xf4\x4f\xf7\xdb\x0d\xab\x31\x52\xbe\x57\xd3\x33\xe9\x42\x36\x29\x45\x86\xb2\x5b\xdb\x4f\x46\x08\xd5\x68\x5a\x22\x37\x12\x85\x69\x40\xa6\xa8\x43\xf4\x4b\xb3\xe2\x84\x46\xb7\x97\xd3\xe4\x3a\x9d\xe3\x1d\x7a\xa5\xbd\x4c\x4b\xa1\xef\x15\xa7\x4c\xc1\x67\x2a\x95\xe0\x93\x52\x9a\xac\x07\x17\x93\x02\xad\x56\x48\x29\x89\x6e\x30\x3d\xdf\xe8\x7f\xa1\xef\x8c\xd0\x47\x59\x93\xd1\xff\x5a\x02\x5a\x92\xb5\x80\xa8\x91\xd4\x32\xdf\x6b\x92\x50\x8d\x9a\x1e\x1f\x52\xb6\x17\x29\x21\xd0\xa2\x33\x9f\x00\x22\xb1\x45\x9f\xf7\x13\xb1\xe9\x3f\x19\xfa\x3e\x11\x93\x2e\xd4\xcd\xb0\x86\xbe\x1e\xb7\x39\x9c\xc9\xd0\x8c\x96\x10\x92\x20\xf0\x62\x99\x36\x7f\x48\xce\xe2\x86\x40\x70\x37\x74\xaa\x74\x24\x82\xf8\xa8\x50\xe4\xba\x52\xd6\x05\x9b\xbb\x93\xf8\x45\x02\x9e\xc2\x2b\x81\x3f\x43\x2a\xd0\xed\x82\x12\x21\xa6\xaf\x8d\x34\x48\x37\x7d\x06\xd8\xfb\x8b\xc0\xc1\x5e\x17\xf6\xde\x34\x5d\x1c\x50\x46\xf5\x0c\x64\x2c\x96\x5a\xc2\x4c\x06\x5c\xa3\x2d\x23\xac\xb7\x2d\xab\x9e\xe7\x53\x50\x48\xbd\x1f\x3a\x0e\x4a\x59\xcf\x75\x98\x1d\x1a\x40\x4d\x02\xec\x02\xb7\x7f\xa0\xa3\x0a\x0d\x81\xe0\x01\x0a\x45\xf3\x43\x46\x7f\x3e\x4a\x49\x86\x38\xfd\x3a\xe1\x25\x95\xa0\x6c\x38\xd3\x88\x7f\x10\x3f\xd0\x46\x5d\xbf\xbc\xad\x4f\xb5\x3a\xdc\x9d\xcb\x8e\x32\x85\x43\x83\xfe\x39\xfc\xda\x96\x35\xd5\xe8\x12\x45\xe6\xb1\x2b\x59\xe9\xe2\xd5\x1a\x52\x7e\x8b\xac\xac\x61\xc9\x9a\x8b\xeb\xc6\xc9\x97\x91\x7d\xe6\xd0\x4b\xfa\xa5\x77\xf3\xab\xd7\xba\xa0\x3d\xd9\x63\xbf\x1f\x3a\xc7\xbd\xb7\xbd\xdb\xe0\xdf\xdf\x8e\xbf\x7c\x68\xe0\xe4\x8b\x67\xff\xeb\x53\x60\x67\x32\xaa\x1f\x2c\x54\x74\x8f\xdd\x11\x8f\xba\x70\xaa\x7d\x1d\x70\x01\x57\x44\xca\x31\x17\x6e\x81\x43\x67\x01\x07\x63\x45\x8c\x2b\x20\x8e\xa2\x77\x44\x61\x9e\xf4\x70\xc9\xe0\x0a\x05\x23\x1e\x68\x97\x8c\x02\x4e\x85\xe0\xa2\x9e\xd9\xb6\xc0\x21\x95\x0a\xc5\x7a\xe6\xfd\x7b\x4c\x0d\x0c\xc7\x10\x4a\x14\x2f\xcf\xca\x53\x01\xed\x0c\x7d\x15\x43\xaf\x68\x13\x57\x64\xe2\x71\xb2\x49\x38\x4b\x54\x09\x96\xc3\xd5\xa0\x2c\x51\x81\x1a\xa1\xc1\x31\x04\x53\x36\xfa\x92\x00\xad\x45\xf4\xf2\xd0\xcc\x6f\xb7\x8c\x65\x4c\xfc\x3b\xf7\xdc\x19\xfc\xdc\x1b\xd9\x03\x2e\x1c\x5c\x19\xde\xe8\x84\x82\xaa\x49\x36\xec\x3e\xfc\x1d\x89\x40\xa1\x3b\x75\xe1\x3f\x47\xae\x4f\xd9\x7f\x67\x8c\xe1\x93\x1e\x0c\xc4\x6b\x31\x89\x9c\x6c\x77\x76\xb1\xf5\x64\x2e\xc1\xd9\x26\xf2\xb9\x35\x53\xb5\x87\x33\xe5\x80\x36\xef\x5a\x4d\x6d\x4f\xb1\x19\x0f\x71\x8e\x19\xc7\x5b\x4a\x28\x18\xe6\x39\x95\x0a\x88\xe7\x19\x8b\x4c\xc1\xb6\x9a\x99\xaf\x8c\xed\x18\xda\x3b\x64\xe7\xd8\x11\x21\xc8\x64\xa6\x8d\x2a\xf4\x4b\x31\x3d\xc7\xf1\x18\x1c\xe4\xc1\xd9\x5a\xb4\x0b\x60\x3a\x10\x70\x41\x7f\x6d\x22\xff\x5f\x10\x40\x4a\x91\x77\x13\xb8\x44\x61\x21\xc9\x2f\x73\xd7\x91\x77\xd6\x92\x4b\xa7\x34\xe3\xc1\xef\xeb\xae\xf5\x1c\xbe\xeb\x9d\xca\xda\xde\xfa\xf2\x1f\x4f\x0e\xcc\xd1\x26\x6f\x44\x24\xd8\x88\x0c\x42\x23\x6e\x77\x2b\x1b\xf1\xaa\x60\x5d\xe6\x49\xa9\x57\x96\xe0\x3f\x2e\xc8\x5d\xf4\x50\xe1\x0a\x38\x3f\x31\x04\x05\x9c\x2f\x75\xaf\x24\xef\x5e\x1f\xdc\x2a\xd6\x42\x67\x18\xd2\x92\x80\x5a\x0d\x9a\xa1\x65\x59\x56\xeb\x25\xd9\x1a\xdf\xea\xc6\x77\xfb\x76\x51\x48\x44\x9a\xff\xd3\xe0\xf8\xff\x3a\xf9\xc8\x19\xaa\x68\x6f\x60\x4f\x0c\xc2\x76\x19\xc6\x63\xfa\xdf\x2d\xe1\x45\x2a\xa2\x42\xb9\x6c\x17\x5a\xea\x5c\xfb\x09\x5e\x22\x1e\x7f\x35\xf5\x4c\x6c\xda\x1e\x77\x6e\xff\xb6\x39\x77\xfb\x18\x7b\x46\x93\x84\xc4\xa2\xd8\x80\x6b\xac\xb8\x31\x39\x21\x8a\x3c\x05\x9f\x21\xb8\x87\x6b\x21\x20\x97\x46\x82\x66\xf2\x0c\x95\x6e\xd6\xfe\xfa\x54\xee\xe1\x1d\x7a\xf7\xd6\xb9\xe1\xf2\x0c\x95\x1e\xad\xfe\xf5\x69\x3d\xe0\x94\x2d\xad\x38\x2e\xd5\xba\xe1\xf2\x0c\xb5\x1e\xad\xfe\x75\x69\x3d\x6f\xe7\x73\x93\xc1\xe4\x2a\x03\x94\x57\xa7\x0c\x8f\xea\xe5\x29\xb2\x2b\x4f\x3d\xc9\xf2\x54\xc1\xe9\x3d\x7e\x7d\x6a\xee\x59\x74\x39\xfa\x8e\x05\x6a\x87\xc3\x70\x1c\xe1\xcf\x08\xe8\x79\x39\x9d\x57\x14\x65\x16\x84\x93\x72\xf5\xc6\xf1\x64\xa7\xda\x67\xa0\xda\x45\x55\xb7\x72\xed\xc6\x65\xb7\x9d\x76\x1f\x4f\xbb\x07\xd6\xc1\x02\xa2\x0b\xae\xe0\x13\x0f\xd9\x26\x53\x0b\x93\x4e\x8d\xa2\x1b\x8b\xcb\x32\x8c\xe9\x0b\x90\x50\x9e\x69\x18\x96\x10\xf3\x5c\x74\x30\xa1\x51\xf0\x33\x44\x31\x0d\x03\x9d\xe7\xdd\xdc\xf4\x4e\xd2\xd7\xa5\xc1\xbd\xb8\xd2\x7f\x6a\x3e\xa6\xe6\xa5\x93\xdb\x30\xa4\xa9\x90\x76\xc9\x4b\x29\xb7\x6d\x24\x2f\x06\x19\xdf\x13\xb4\x6d\x39\xa9\x1e\x70\xe1\x2f\x43\x7c\x7c\x6d\x17\xca\x81\xae\x39\xc8\xc7\x02\xf8\xcf\x1d\xc0\x0b\xcc\x9e\x24\xc0\x0d\xa6\x9e\x5e\x72\x5e\x0a\xe3\x38\x37\x27\x06\xc6\xdb\x3e\x3f\xce\x0b\xee\x45\x1c\x67\x99\x7b\xfd\xe9\xd1\xb1\x63\x64\xfd\xa4\x8e\x8e\x67\xa0\xfa\xf4\x8f\xc8\x16\xec\x4f\x4a\x11\x1e\x6f\x4f\x76\x08\x7f\x04\x84\x3f\xc1\xcb\x11\xcf\x12\xe1\x8b\xb6\x69\xa5\x20\x8f\x77\x69\x45\x90\x3f\xb1\xeb\x11\xaf\xd3\x24\x22\x55\x6e\xc7\x24\x4a\x17\xff\x0c\x4c\xe0\x0d\x7c\xe5\x2e\x7a\x70\x92\xc1\xa4\x96\x83\x8c\xe6\x67\xbe\xe3\x15\x31\x9e\x59\x65\x8a\x48\xf3\xb4\x1f\x5d\x1a\x8d\x3f\x27\x77\x46\xa3\x40\x32\x83\x81\xe8\x6b\x8f\x8b\x33\xf2\xec\xfa\x8d\x44\xf1\x51\xa1\x54\xf1\x97\x22\xa1\xf4\x8e\xec\x62\x1e\xc1\x47\x29\xc7\x96\x99\x8f\xb9\xe7\xbc\xc6\x92\xb8\xe7\x5e\xe5\x57\xb5\x0f\x0c\xc7\x57\x0f\xbc\xce\xdc\xa0\x6b\x2c\x55\xff\xe5\x26\x59\x95\x83\x15\x20\x93\xea\xa3\xa3\x77\x08\xd9\xd5\xf0\x95\x45\xb6\x61\x71\x24\x5f\x44\xba\x2f\x1a\x23\x77\x1b\x7f\x24\x43\x64\xce\x24\x7e\x08\x19\x55\x09\x05\x97\xc6\x08\x92\xc7\x11\x67\xb8\x89\x45\xe9\xf5\x6c\x10\xcb\x90\xec\x72\x2b\x92\x7e\xe1\xa3\xe4\xbb\x06\xd1\xca\xab\x12\x1e\x9f\x7d\xfd\x1c\xbf\xd5\x52\x4a\xc9\xca\xa8\x52\xa2\xa3\x1e\x28\x24\xc9\x32\x7f\x70\xfb\xda\x7c\x6b\xba\x12\x2d\xb2\x21\x65\x2c\xf5\xce\x46\x01\x95\xf1\xfb\xa1\xd5\xee\x1c\x1c\xbe\x7d\xf7\x5e\x7b\x30\xbc\x43\xaf\x22\x66\x72\xc0\x18\x06\x61\xfc\xc9\x8d\xb7\xaa\xb3\x9a\xa7\xcb\x54\xa6\x63\x2e\x51\xdd\xfc\xd5\xb0\x29\xd7\x7c\x14\x2a\x0e\x43\x64\x48\x84\xce\x9e\xed\x09\xb8\xf6\x1a\x7a\xad\x9f\x9f\x7e\x3b\x3d\x87\x4e\x12\x11\x58\xe8\xdb\x28\x2e\x07\x67\x57\x37\xd3\x2c\xa6\xa3\x5e\x49\xb4\x73\xc9\x0c\x2e\xe6\x52\xb5\x32\xaa\xdc\xba\xaa\x4e\xfb\x42\x0b\xc8\x4b\x2f\x9b\xea\xff\xe7\xa8\x6a\x56\xfa\xc5\x1b\x9d\xd5\xe5\x5f\x7e\xad\x73\xa9\x5e\xa4\x09\x9d\x9b\xb2\xf9\x9d\xd1\x4e\xd3\x16\x8c\x56\xff\xe5\x0c\x77\x39\x75\xf4\x03\x02\x89\x32\x4d\xe9\xb3\x32\x84\x0f\xad\x14\xc3\x82\x7b\x95\x27\x6c\xbe\x53\x92\xe8\xc5\xdc\xe3\x9b\xa6\xb4\x39\xf7\x4a\xe0\x90\xa5\xef\xe6\xde\x5f\x35\xaa\x01\xf1\x24\xc6\x26\xf2\x3d\x2b\x3e\xed\xec\xe4\x55\xdb\x49\x84\x86\x42\xfe\x50\x05\x11\x71\x45\x7c\x5b\xa8\x90\xe8\x08\x9c\xb1\xcf\x79\x0b\x76\xec\xc1\x41\xab\x73\xf0\xce\xb6\x5b\x1f\xde\xbd\x1f\xbc\x1d\x74\xda\xd6\xfb\x77\x76\xdb\x19\x58\x2d\xec\x1c\xb6\x12\x31\x44\x77\x51\x9f\x8d\x10\x1e\xd9\x65\x64\x9e\xed\x19\xc8\x66\x15\xab\x4f\xdc\x70\x76\x4b\xf1\x45\x2e\xb3\x1e\x47\xb8\x7a\x16\x03\xd2\x18\xb7\x34\xaf\x2d\x1c\x81\xed\x83\xa9\x47\xe5\x9e\x0d\xab\xfb\xc9\xa8\x28\x8e\x76\x82\xf1\x64\xa0\x95\xa8\xd7\x8b\xe2\x51\x22\x5a\x38\xf4\xac\x0c\x84\xa5\x01\xb2\x6a\xce\xfe\xcc\xa4\x65\x3a\xd2\x15\x40\xd8\xb6\x5a\xef\xf7\xad\x0f\xfb\xed\xc3\xeb\x56\xab\xdb\xe9\x74\x0f\xde\x37\x2c\xcb\xaa\x97\x0b\xaa\xd7\xbf\x3c\x21\x0a\xa3\x2a\x82\x5f\x11\xab\x7c\xcc\x50\xdc\x4c\x01\xd6\x1c\xa1\x5e\xd3\x74\x77\x26\x90\xc8\x74\x73\x9e\xdb\xb5\x65\xfb\xf4\x62\x01\xc0\x19\x11\x31\x4c\x3b\x09\xae\x47\xbf\xc8\xc8\xa8\xb0\x2f\xcc\x8e\x29\x7e\x1e\x84\xcc\xa5\x6c\xd8\xe7\xa1\x70\xa6\xa8\xfa\xce\x08\xdd\xd0\x4b\xde\x2a\x41\x28\xa3\x6c\x68\x0a\x69\x85\xfe\x85\x96\x13\x2a\x6f\xfb\xf4\xd7\x74\xdb\x29\xbb\xa3\x82\x33\x1f\x59\x52\x77\x60\xa1\x7f\x76\x75\x23\xe3\x27\x8f\xb0\x61\x48\xd2\x89\xe3\x1f\x01\x3a\x2a\x15\xc3\x63\x6f\x48\x0b\x9a\xd9\x9c\xcf\xcc\x94\xfb\xe0\x30\x84\xb9\x71\x77\x6e\xb6\x55\xce\x72\xcf\x02\x2a\x41\xa0\x46\xc4\x6f\xd0\xd2\x0f\x94\x45\x9c\x7f\x83\xb6\x7e\x8c\x1e\xb2\x82\xbb\xc6\x6b\xe5\xf5\x5d\x8f\x30\xc1\x1b\x30\xcc\x0a\xbd\x2b\x05\x0c\x9d\x0e\xd7\xef\x9d\x61\xc2\x3a\x65\xbb\xd6\x74\x1a\x1f\xd9\xdf\x34\x8b\xa9\x8a\x79\xf9\x51\x41\x04\xfa\xb2\xd3\x86\xb2\xfa\x7d\xe6\xe0\x0e\x0b\xc5\x7b\xe2\xa8\x90\x78\xab\x73\xc9\xb6\x86\x39\xaf\x51\x59\x05\xe6\xe7\x01\xaf\x22\xc2\x44\x15\xa9\xaf\xa9\xca\x85\x0a\x3b\x67\x2d\x05\xd7\xb4\x94\x85\x1f\x90\x68\x22\x9f\xbf\x7e\xae\x17\x17\x92\x38\xb2\xb5\x94\x22\x15\x11\x4a\x1b\x55\x99\x44\x4b\x4e\x6e\x12\x77\xe0\x66\x76\x38\x2d\xab\xc4\xa6\xad\x56\xfe\x0c\x07\x99\xfb\x30\xc3\x74\x52\x6f\xe1\x6b\x07\x7d\x24\x9c\x11\x55\xe8\xa8\x50\xac\xa0\xde\x8b\x8b\x02\x93\x73\x32\x99\x55\xeb\xdc\x10\xdc\x49\xdc\xaa\xac\x3c\xe0\x8d\x1d\x32\x15\x42\xeb\x6d\xc3\x3a\x48\x46\x1e\x06\xa1\x09\x31\xd5\x6b\x6e\xdf\x7a\x27\xbd\x23\xb8\x46\xe9\x11\xf8\xd6\xca\xdc\x26\x06\xdc\x19\xad\xe4\x87\x5b\xe0\x92\x09\x74\x60\xc4\x43\x51\xe0\xa2\x63\xdd\x72\x41\xf8\x24\xaa\xbf\xc4\xaf\x6c\xa2\xaa\x52\x4e\x89\xb0\x24\x0a\xaf\xe4\x6b\xf9\x60\x40\x1d\xe2\x41\x40\x86\x08\x2e\x1f\xb3\xfc\x91\x5c\x69\x20\x5f\xa7\x3e\x4a\x14\xb9\xd6\x9d\xab\xce\xac\xe7\x93\x21\x96\xcf\xa2\x70\x0c\xb9\x6c\x06\xed\xcc\x89\x95\x24\x1e\xd5\x05\x85\x4c\x72\x31\xf0\xf8\x38\x57\x65\xd6\xc9\x4a\x05\x45\x47\x6e\xa8\x3d\x35\x8b\x95\xa4\xd1\x0f\x03\x14\x77\x54\x66\xd1\x30\xc9\x8e\x2a\xb3\xb8\x9a\xa8\x11\x4f\x63\x62\x96\x4d\x3d\x39\x17\x78\xf0\x28\x2e\xb0\xf5\xb6\x5e\x7b\x03\xc7\xdc\x0f\x38\x43\xa6\x64\xcd\x49\x3f\xea\xc1\x92\x6b\x0d\xfd\xe4\xd7\x51\x21\x7f\xab\xa1\x96\x9f\x87\xf9\xd5\xd4\x58\x2c\xa6\x77\x17\x6c\xd3\xb5\x56\xfb\x33\x00\x00\xff\xff\xdf\xa5\x8e\x8d\x6f\x57\x00\x00")

func apiSwaggerSpecV1YmlBytes() ([]byte, error) {
	return bindataRead(
		_apiSwaggerSpecV1Yml,
		"api/swagger-spec/v1.yml",
	)
}

func apiSwaggerSpecV1Yml() (*asset, error) {
	bytes, err := apiSwaggerSpecV1YmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "api/swagger-spec/v1.yml", size: 22383, mode: os.FileMode(420), modTime: time.Unix(1543386359, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"api/swagger-spec/v1.yml": apiSwaggerSpecV1Yml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"api": &bintree{nil, map[string]*bintree{
		"swagger-spec": &bintree{nil, map[string]*bintree{
			"v1.yml": &bintree{apiSwaggerSpecV1Yml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

