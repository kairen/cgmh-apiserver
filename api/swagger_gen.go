// Code generated by go-bindata.
// sources:
// api/swagger-spec/v1.yml
// DO NOT EDIT!

package swagger

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _apiSwaggerSpecV1Yml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\x5b\x73\xdb\xba\x11\x7e\xd7\xaf\xd8\x71\x3a\xa3\x76\xa6\x96\x48\xc9\xce\x45\x4f\x71\x6d\x27\x47\xa9\x63\xbb\xb1\x9d\x76\xa6\xd3\xc9\x40\xe4\x4a\x42\x4c\x02\x3c\x00\x28\x1d\xa5\xd3\xff\xde\x01\x48\xf0\x22\x51\x12\xa5\x38\xbe\xca\x0f\x89\x44\x60\x17\xd8\xdd\x6f\x2f\xb8\x50\x72\x4a\x46\x23\x14\x3d\x68\x76\x5a\x4e\xb3\x41\xd9\x90\xf7\x1a\x00\x3e\x4a\x4f\xd0\x48\x51\xce\x7a\x70\xfc\xf1\xf3\x6f\xf0\x81\x8b\x50\xc2\xd1\x65\xbf\x01\x30\x41\x21\x4d\x8b\xdb\x72\x5a\x4e\x03\x40\x51\x15\x60\x45\x47\x85\x22\x94\x17\xc3\x2b\x14\x13\xea\x61\x0f\xc6\x4a\x45\xbd\x76\x3b\xe0\x1e\x09\xc6\x5c\xaa\x06\x80\xc7\x99\x22\x9e\xd2\x83\x02\x60\x48\x68\xd0\x83\xdb\x59\x80\xad\xc1\x7b\xca\xa6\x94\x49\x45\xbc\xdb\x96\xc7\xc3\x06\x40\x40\x3d\x64\x12\x93\xbe\x8c\x84\xd8\x83\xa3\x88\x78\x63\x84\x8e\x99\x06\x40\x2c\x82\x6c\x94\xe9\x74\xda\x22\xa6\xb9\xc5\xc5\xa8\x9d\x12\xcb\xf6\x59\xff\xf8\xf4\xfc\xea\x74\xbf\xd3\x72\x5a\x63\x15\x06\x0d\x3d\x93\x1e\xe4\x93\x52\x64\x24\x7b\x8d\x7d\x3b\x42\xac\xc6\xf3\x1a\xb9\x91\x28\x4c\x03\x32\x45\x3d\xa2\x1f\x1a\x89\x2d\x8d\x6e\xaf\xa6\x29\x74\x3a\xc3\x09\x06\x95\xbd\x4c\x4b\xa9\xef\x25\xa7\x4c\xc1\x6f\x54\x2a\xc1\x67\x95\x34\x79\x0f\x2e\x66\x25\x5a\x6d\x90\x4a\x12\xdd\x60\x7a\xbe\xd2\xff\xc2\x95\x37\xc6\x10\x65\x43\x26\xff\x6b\x0d\x68\x4d\x36\x22\xa2\xc6\x52\xeb\x7c\xaf\x4d\x62\x35\x6e\x07\x7c\x44\xd9\x5e\x62\x84\x48\xab\xce\x7c\x02\x48\xd4\x96\x7c\xde\xb7\x6a\xd3\x7f\x32\x0e\x43\x22\x66\x3d\x68\x9a\x61\x0d\x7d\x33\x6d\xf3\x38\x93\xb1\x19\xcd\x12\x92\x28\x0a\x52\x9d\xb6\xbf\x4b\xce\xd2\x86\x48\x70\x3f\xf6\xea\x74\x24\x82\x84\xa8\x50\x14\xba\x52\xd6\x83\x01\xf7\x67\xe9\x03\x0b\x9e\xd2\x23\x81\xbf\xc7\x54\xa0\xdf\x03\x25\x62\xcc\x1e\x1b\x6d\x90\x5e\xf6\x1d\x60\xef\x4f\x02\x87\x7b\x3d\xd8\x7b\xd5\xf6\x71\x48\x19\xd5\x33\x90\xa9\x5a\x1a\x96\x99\x8c\xb8\x46\x5b\x4e\xd8\xec\x38\x4e\xb3\xc8\xa7\x64\x90\xe6\x55\xec\x79\x28\x65\xb3\xd0\x61\x71\x68\x00\x35\x8b\xb0\x07\x7c\xf0\x1d\x3d\x55\x6a\x88\x04\x8f\x50\x28\x5a\x1c\x32\xf9\x0b\x51\x4a\x32\xc2\xf9\xc7\x96\x97\x54\x82\xb2\xd1\x42\x23\xfe\x41\xc2\x48\x3b\x75\xf3\xe2\xb6\x39\xd7\xea\x71\x7f\x29\x3b\xca\x14\x8e\x0c\xfa\x97\xf0\xeb\x38\xce\x5c\xa3\x4f\x14\x59\xc6\xae\x42\xd2\xd5\xd2\x1a\x52\x7e\x8b\xac\xaa\x61\x8d\xcc\x65\xb9\x71\xf6\x69\x3c\xf8\xe8\xd1\x0b\xfa\xa9\x7f\xf3\xa3\xef\x9e\xd3\xbe\xec\xb3\x2f\x87\xde\x71\xff\x75\xff\x36\xfa\xd7\xd7\xe3\x4f\xef\x5a\x38\xfb\x14\x0c\xfe\xf9\x21\x1a\xe4\x3a\x6a\x1e\xac\x34\x74\x9f\x4d\x48\x40\x7d\x38\xd5\xb1\x0e\xb8\x80\x4b\x22\xe5\x94\x0b\xbf\xc4\xa1\xbb\x82\x83\xf1\x22\xc6\x15\x10\x4f\xd1\x09\x51\x58\x24\x3d\x5c\x33\xb8\x42\xc1\x48\x00\x3a\x24\xa3\x80\x53\x21\xb8\x68\xe6\xbe\x2d\x70\x44\xa5\x42\xb1\x9d\x7b\x7f\x49\xa9\x81\xe1\x14\x62\x89\xe2\xf9\x79\x79\xa6\xa0\x9d\xa3\x6f\xe2\xe8\x35\x7d\xe2\x92\xcc\x02\x4e\xee\x12\xce\x12\x95\xc5\x72\xbc\x19\x94\x25\x2a\x50\x63\x34\x38\x86\x68\xce\x47\x9f\x13\xa0\xb5\x8a\x9e\x1f\x9a\xf9\xed\x03\x63\x19\x6d\x7c\xe7\x81\xbf\x80\x9f\x9f\x46\xf6\x90\x0b\x0f\x37\x86\x37\x7a\xb1\xa0\x6a\x96\x0f\xbb\x0f\x7f\x43\x22\x50\xe8\x4e\x3d\xf8\xf7\x91\x1f\x52\xf6\x9f\x05\x67\xf8\xa0\x07\x03\xf1\x52\x5c\xa2\xa0\xdb\x9d\x5f\x3c\x78\x31\x67\x71\x76\x17\xf5\xdc\x96\xa5\xda\xaf\x73\xe5\x88\xb6\x27\x6e\x5b\xfb\x53\xea\xc6\x23\x5c\xe2\xc6\xe9\x92\x12\x4a\x8e\x79\x46\xa5\x02\x12\x04\xc6\x23\x33\xb0\x6d\xe6\xe6\x1b\x63\x3b\x85\xf6\x0e\xd9\x05\x76\x44\x08\x32\x5b\x68\xa3\x0a\xc3\x4a\x4c\x2f\x09\x3c\x06\x07\x45\x70\xba\xab\x56\x01\x4c\x27\x02\x2e\xe8\x8f\xbb\xa8\xff\x57\x24\x90\x4a\xe4\xdd\x44\x3e\x51\x58\x2a\xf2\xab\xc2\x75\x12\x9d\xb5\xe6\xb2\x29\x2d\x44\xf0\x9f\x0d\xd7\x7a\x0e\xdf\xf4\x4a\x65\xeb\x68\x7d\xf1\xf7\x47\x07\xe6\x64\x91\x37\x26\x12\x06\x88\x0c\x62\xa3\x6e\xff\x41\x16\xe2\x75\xc1\xba\x2e\x92\xd2\xa0\xaa\xc0\xbf\x5f\x90\xfb\x18\xa0\xc2\x0d\x70\x7e\x62\x08\x4a\x38\x5f\x1b\x5e\x49\x31\xbc\xfe\x72\xaf\xd8\x0a\x9d\x71\x4c\x2b\x12\x6a\x3d\x68\xc6\x8e\xe3\x38\xee\x73\xf2\x35\xfe\xa0\x0b\xdf\x87\xf7\x8b\x52\x21\xd2\xfe\xaf\x06\xc7\xff\xb6\xa9\x47\x3e\xa2\x4a\xd6\x06\x83\x99\x41\xd8\xae\xc2\xb8\xcf\xf8\xfb\x40\x78\x91\x8a\xa8\x58\xae\x5b\x85\x56\x06\xd7\x2b\x8b\x97\x84\xc7\x9f\xcd\x7e\x26\xb6\x07\x01\xf7\x6e\xff\x72\x77\xe1\xf6\x3e\xd6\x8c\xa6\x08\x49\x55\x71\x07\xa1\xb1\xe6\xc2\xe4\x84\x28\xf2\x18\x62\x86\xe0\x01\x6e\x85\x80\x42\x19\x09\x9a\xc9\x13\x34\xba\x91\xfd\xe5\x99\x3c\xc0\x09\x06\x3f\x6d\x73\xc3\xe5\x09\x1a\x3d\x91\xfe\xe5\x59\x3d\xe2\x94\xad\xdd\x71\x5c\x6b\x75\xc3\xe5\x09\x5a\x3d\x91\xfe\x65\x59\xbd\xe8\xe7\x4b\x8b\x41\x7b\x95\x01\xaa\x77\xa7\x0c\x8f\xfa\xdb\x53\x64\xb7\x3d\xf5\x28\xb7\xa7\x4a\x41\xef\xfe\xf7\xa7\x96\x9e\x45\x57\xa3\xef\x58\xa0\x0e\x38\x0c\xa7\x09\xfe\x8c\x82\x9e\x56\xd0\x79\x41\x59\x66\x45\x3a\xa9\x36\x6f\x9a\x4f\x76\xa6\x7d\x02\xa6\x5d\xb5\xeb\x56\x6d\xdd\x74\xdb\x6d\x67\xdd\xfb\xb3\xee\x81\x73\xb0\x82\xe8\x9c\x2b\xf8\xc0\x63\x76\x97\xa5\x85\x29\xa7\xc6\xc9\x8d\xc5\x75\x15\xc6\xfc\x05\x48\xa8\xae\x34\x0c\x4b\x48\x79\xae\x3a\x98\xd0\x28\xf8\x3d\x46\x31\x0f\x03\x5d\xe7\xdd\xdc\xf4\x4f\xb2\xc7\x95\xc9\xbd\x2c\xe9\x3f\x34\x1f\xb3\xe7\xa5\x8b\xdb\x38\xa6\x99\x92\x76\xc5\x4b\x25\xb7\x87\x28\x5e\x0c\x32\xbe\x59\xb4\x3d\x70\x51\x3d\xe4\x22\x5c\x87\xf8\xf4\xda\x2e\x54\x03\x5d\x73\x90\x3b\x80\xe7\x7f\x2f\x1e\xe0\x06\x53\x8f\xaf\x38\xaf\x84\x71\x5a\x9b\x13\x03\xe3\x87\x3e\x3f\x2e\x2a\xee\x39\x1c\x67\x3d\xaa\x53\x8a\x05\x54\x3e\xfe\xd3\xb0\x15\x4b\x91\x4a\x30\xa7\x2b\x91\x1d\x98\x77\x60\x7e\x8c\x60\x5e\xb5\xf8\xaa\xc4\x73\xba\xf6\x2a\xe3\xf9\x39\x5c\x7a\xd8\x5d\x79\x78\x14\xe5\xce\x9c\x9c\x4f\xc2\x8d\x4a\x95\x7b\xbd\x13\xef\x55\xb9\x42\x73\x49\x0f\xbd\x9f\xd6\xc6\x86\x9e\xf8\x0b\x3a\xe6\x7e\x05\x9f\xb9\x8f\x01\x9c\xe4\x2a\x68\x14\xd4\xa1\xf9\x99\xd7\xfe\x12\xc6\x0b\xf0\xce\xb4\xdd\x48\x2c\x64\xee\x11\xa7\x9f\xed\x35\xe2\x04\x44\x0b\x7e\x9e\xbc\x09\x9b\xcd\xb7\xd2\xab\xf3\xf0\x24\x51\xbc\x57\x28\x55\xfa\x9e\x2c\x54\x5e\x9b\x5e\xcd\x23\x7a\x2f\xe5\xd4\x31\xf3\x31\x57\xdf\xb7\x10\x89\x07\xfe\x65\x51\xaa\x7d\x60\x38\xbd\xfc\xc5\x72\x16\x06\xdd\x42\x54\xfd\x57\x98\x64\x5d\x0e\x4e\x84\x4c\xaa\xf7\x9e\x8e\xa2\xf9\xdb\x02\x1b\xab\xec\x8e\xd5\x61\xdf\x4d\xfb\x59\x34\x26\xb9\x3a\xfd\x48\x46\xc8\xbc\x59\xfa\x25\x66\x54\x59\x0a\x2e\x8d\x13\xd8\xaf\x63\xce\xf0\x2e\x84\xd2\xf2\xdc\x21\x96\xc1\xc6\xc1\x9a\xa4\x9f\xf8\xd8\xbe\x7e\x92\x48\x5e\x97\xf0\xf8\xe3\xe7\xdf\xd2\xa7\x5a\x4b\x19\x59\x15\x55\x46\x74\xd4\x07\x85\xc4\x8a\xf9\x9d\x0f\xae\xcd\x8b\xf4\xb5\x68\x91\x8d\x28\x63\x59\x5a\x36\x06\xa8\x8d\xdf\x77\x6e\xa7\x7b\x70\xf8\xfa\xcd\x5b\x1d\xc1\x70\x82\x41\x4d\xcc\x14\x80\x31\x8a\xe2\x4b\x41\x3d\xfb\xd5\x27\xb3\xfc\xeb\x22\x06\xe8\x3a\xe3\xe9\xcc\x42\x54\xaf\x78\x6f\x70\x2e\x48\x1f\xc5\x8a\xc3\x08\x19\x12\xa1\x73\xe8\x60\x06\xfe\x60\x0b\x0b\x37\xcf\x4e\xbf\x9e\x9e\x41\xd7\xe6\x06\x2b\xc7\x3c\xfd\x7c\xd5\x53\x51\xed\x58\x99\x6b\x93\xba\x39\x69\x41\xb2\xba\x13\x3f\xd7\x2a\x0a\xb2\xbb\xc8\xfa\xff\x25\x66\x5b\xd4\x7f\xf9\xc2\x6f\x7d\x0b\x54\x97\xc0\x6b\x2d\x23\x4d\x1a\xbd\x2b\xff\xdf\x39\xf0\x3c\x6d\xc9\x81\xf5\x5f\xc1\x89\xd7\x53\x27\xbf\x2f\x61\x8d\x69\x76\xc6\x6b\x43\xf8\xd0\xc9\x30\x2c\x78\x50\x7b\xc2\xe6\x95\x23\x6b\x17\x73\xcd\x73\x9e\x72\xc0\x79\x50\x01\x87\xbc\x4c\x35\xd7\x42\xeb\x51\x0d\x49\x20\x31\x75\x91\x6f\xf9\xde\xe4\xce\x4f\x5e\xb4\x9f\x24\x68\x28\xd5\x12\x75\x10\x91\x1e\x98\x3c\x14\x2a\x24\x7a\x02\x17\xfc\x73\x99\xc0\xde\x60\x78\xe0\x76\x0f\xde\x0c\x06\xee\xbb\x37\x6f\x87\xaf\x87\xdd\x8e\xf3\xf6\xcd\xa0\xe3\x0d\x1d\x17\xbb\x87\xae\x55\x43\xb2\x86\x7b\x32\x4a\xb8\xe7\x90\x91\x47\xb6\x27\xa0\x9b\x4d\xbc\xde\x86\xe1\xfc\x12\xeb\xb3\x14\xb3\x99\x66\xb8\x66\x9e\x03\xb2\x1c\xb7\xb6\xc6\x2d\x9d\x90\xee\x83\xd9\x77\x29\x7c\x9f\x90\x20\x5e\x56\xe5\xd6\xd4\x51\x59\x1d\x1d\x8b\x71\x3b\xd0\x46\xd4\x56\x99\x66\x5a\x1b\x16\xa2\xa5\x33\xf1\xda\x40\x58\x9b\x20\xeb\x56\xed\x4f\x4c\x5b\xa6\x23\xdd\x00\x84\x1d\xc7\x7d\xbb\xef\xbc\xdb\xef\x1c\x5e\xbb\x6e\xaf\xdb\xed\x1d\xbc\x6d\x39\x8e\xd3\xac\x56\x54\xff\xea\xe2\x84\x28\x4c\x76\x14\xc2\xed\xb0\x9a\xfe\x98\xda\x79\xbe\x4a\x4b\x9f\x9c\x16\xd6\xfa\xe9\xa3\xcb\x6c\xc5\xbe\xaf\x8d\xac\x87\x28\xd0\x51\x31\xc8\xb8\x0e\x63\xe6\x53\x36\xba\xe2\xb1\xc8\x96\x7b\x4a\x10\xca\x28\x1b\x99\xfd\xb1\xe5\x2d\x27\x54\xde\x5e\xd1\x1f\xf3\x6d\xa7\x6c\x42\x05\x67\x21\x32\xbb\x9d\xc0\xe2\x70\x80\xe2\x62\xf8\xf1\xf2\x26\x7d\x12\x10\x36\x8a\xc9\x68\x6e\x8a\x57\xde\x18\xfd\x38\xb0\x4f\xf1\x8f\x08\x3d\x75\x4d\xb3\x79\x0b\x24\x32\xdb\x94\xf0\xc6\x44\x8c\xb6\x5e\x91\xe6\x39\x95\xb8\x9d\xae\x7b\xe0\xfa\xc4\xab\x1d\xba\x36\x05\x79\x8d\xb0\x69\x91\x5f\x30\x72\x6d\x28\xea\x6a\xaf\x59\xa6\x3f\xdd\x74\xab\xc9\x9d\x2f\x37\x8b\x40\xda\x7a\xe1\x52\x80\x5e\x6d\x69\xcc\xef\x0c\x5e\x26\x84\x56\x2a\x03\xd8\xba\x1c\xa8\x18\x14\x82\x41\x09\xdf\x6b\x59\x84\x11\xc9\x26\x61\x07\x0f\x35\xd6\x8f\x84\x37\xa6\x0a\x3d\x15\x8b\x0d\x44\x39\x3f\x2f\x31\x39\x23\x33\xbb\xaa\x87\xf5\x81\xa9\x9b\x3e\xe2\xb2\xf6\x80\x37\x83\x98\xa9\x18\xdc\xd7\x2d\xe7\xa0\xb0\x05\x62\xbc\xb5\xfe\x4e\xc4\xd7\xfe\x49\xff\x08\xae\x51\x06\x04\xbe\xba\x79\x4c\xc3\x88\x7b\xe3\xeb\x4d\x82\xa4\x0b\x3e\x99\x41\x17\xc6\x3c\x16\x25\x2e\x3a\x6c\xac\x57\x44\x48\x92\x55\xa9\x2d\xf8\x88\xaa\x4b\x39\xa7\xc2\x8a\x80\x56\x5b\x86\xeb\x31\x02\x1f\x0e\xa9\x47\x02\x88\xc8\x08\xc1\xe7\x53\x56\x3c\xad\xaa\x8c\x89\xdb\xa4\x9f\x12\x9f\xd2\x19\xdb\x3a\x1e\x1d\x67\x81\x4b\x21\x0a\xd7\x17\x15\x99\xe4\x62\x18\xf0\xe9\xbc\x6c\xd7\x9a\xb0\x2e\x9b\xab\x38\x42\x31\xa1\x32\x3f\xa2\xf1\x89\x22\x1b\xb1\xe8\x87\x64\x94\xbd\x2f\x58\x48\x1f\x35\x30\x93\x78\xb0\x8d\xa7\x36\xd1\xd4\x1e\xf9\x72\xa6\xc6\x3c\x0b\xa7\x79\x0a\x9a\x67\x30\x77\xd0\x59\x7d\x98\x2b\x15\x11\x4a\x27\xfe\xe2\xc3\x15\xc7\xb8\x36\x51\xf8\x49\xad\x90\xff\x2d\xd6\x1d\xb9\x83\x9b\x76\xe6\xff\x9a\x61\xdc\xd7\xcd\x72\x2c\xb7\x39\xfa\xd1\xe9\xc3\xbd\x17\x7d\x74\xb3\x68\x98\xd4\x1f\x5b\xa9\x21\x41\x55\xd5\xe4\xaa\x4e\xe3\x73\x37\x3f\x2c\x1d\xc5\x13\x4f\xc5\x24\xd8\x9c\x4b\x61\x8f\xcf\xd4\x53\xb5\x5d\xe3\x4b\xcc\x20\x9c\x65\x31\x21\xc9\x69\xd9\x11\xb7\x2a\xe9\x7b\x35\xab\x2f\x58\xd2\x52\xa9\xdc\xda\x4b\x1a\xff\x0a\x7d\x96\x6c\x0c\x00\x61\x3e\x1c\x99\x8f\x7b\x99\x57\x4b\x95\x9c\xb6\x6f\x94\x8e\xb6\xad\xd9\x8d\xb9\x05\x9a\xdf\x30\xbb\x97\x01\x0b\x27\xf1\x35\xd7\x0a\x9a\x22\xab\xe9\x8d\x2d\x96\x54\xc6\x49\xc7\x9f\xa8\x8e\xef\xc9\xd0\xaf\xe0\x98\x87\x11\x67\xc8\x94\x6c\x78\xd9\x47\x3d\xb0\xbd\x4d\x71\x65\x7f\xcb\x18\x8a\x97\x29\x1a\xc5\x79\x99\xdf\x38\x4e\xe7\x6d\x7a\xf7\x60\x60\xba\x36\x1a\xff\x0f\x00\x00\xff\xff\x4b\xd4\x0f\x79\x1d\x5b\x00\x00")

func apiSwaggerSpecV1YmlBytes() ([]byte, error) {
	return bindataRead(
		_apiSwaggerSpecV1Yml,
		"api/swagger-spec/v1.yml",
	)
}

func apiSwaggerSpecV1Yml() (*asset, error) {
	bytes, err := apiSwaggerSpecV1YmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "api/swagger-spec/v1.yml", size: 23325, mode: os.FileMode(420), modTime: time.Unix(1543476354, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"api/swagger-spec/v1.yml": apiSwaggerSpecV1Yml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"api": &bintree{nil, map[string]*bintree{
		"swagger-spec": &bintree{nil, map[string]*bintree{
			"v1.yml": &bintree{apiSwaggerSpecV1Yml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

