// Code generated by go-bindata.
// sources:
// api/swagger-spec/v1.yml
// DO NOT EDIT!

package swagger

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _apiSwaggerSpecV1Yml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\x5d\x73\xdb\xba\xd1\xbe\xd7\xaf\xd8\x71\xde\x19\xdd\x1c\x49\x94\xec\xe4\x4d\x78\x15\xd7\x76\x12\xa5\x8a\xe3\x39\xb2\xd3\x76\x3a\xbd\x80\xc8\x15\x89\x63\x12\xe0\x01\x40\xe9\x28\x9d\xfe\xf7\x0e\xc0\x6f\x8a\x92\x28\xc7\xb1\xe5\x53\xe9\xc2\x16\x09\xec\x62\xb1\xfb\xec\x07\x96\xb4\xe5\x92\x78\x1e\x0a\x1b\xba\xa3\xbe\xd5\xed\x50\x36\xe7\x76\x07\xc0\x45\xe9\x08\x1a\x29\xca\x99\x0d\x17\x1f\xbf\x7c\x82\x0f\x5c\x84\x12\xce\x6f\xc6\x1d\x80\x05\x0a\x69\x46\x86\x7d\xab\x6f\x75\x00\x14\x55\x01\x36\x4c\x54\x28\x42\xf9\x75\x3e\x45\xb1\xa0\x0e\xda\xe0\x2b\x15\xd9\x83\x41\xc0\x1d\x12\xf8\x5c\xaa\x0e\x80\xc3\x99\x22\x8e\xd2\x8b\x02\x60\x48\x68\x60\xc3\xfd\x2a\xc0\xfe\xec\x3d\x65\x4b\xca\xa4\x22\xce\x7d\xdf\xe1\x61\x07\x20\xa0\x0e\x32\x89\xc9\x5c\x46\x42\xb4\xe1\x3c\x22\x8e\x8f\x30\x32\x62\x00\xc4\x22\xc8\x57\x59\x2e\x97\x7d\x62\x86\xfb\x5c\x78\x83\x94\x58\x0e\x26\xe3\x8b\xab\xeb\xe9\x55\x6f\xd4\xb7\xfa\xbe\x0a\x83\x8e\x96\xc4\x86\x42\x28\x45\x3c\x69\x77\x7a\xd9\x0a\xb1\xf2\xeb\x1a\xb9\x93\x28\xcc\x00\x32\x45\x1d\xa2\x6f\x9a\x1d\x67\x34\x7a\xbc\x99\xa6\x34\x69\x82\x0b\x0c\x1a\x67\x99\x91\xca\xdc\x1b\x4e\x99\x6a\x9c\x6b\x46\xd6\xe7\x4e\xb8\xb7\x65\xfa\x84\x7b\x15\x12\x6d\xb3\xc6\xe9\x7a\xc0\xcc\x7c\xa5\x7f\xc2\xd4\xf1\x31\x44\xd9\x91\xc9\x6f\xad\x24\xad\xec\x4e\x44\x94\x2f\xb5\x59\x4e\x06\x24\x56\xfe\x20\xe0\x1e\x65\x27\x89\x9d\x22\xad\x5d\xf3\x0d\x20\xd1\x6c\xf2\xbd\x97\x69\x56\x7f\x64\x1c\x86\x44\xac\x6c\xe8\x9a\x65\x0d\x7d\x37\x1d\x73\x38\x93\xb1\x59\x2d\x23\x24\x51\x14\xa4\x6a\x1f\xfc\x26\x39\x4b\x07\x22\xc1\xdd\xd8\x69\x33\x91\x08\x12\xa2\x42\x51\x9a\x4a\x99\x0d\x33\xee\xae\xd2\x1b\x19\xbe\x2a\xb7\x04\xfe\x1e\x53\x81\xae\x0d\x4a\xc4\x98\xdf\x36\xda\x20\x76\x7e\x0d\xa0\x56\x11\xda\xc0\x67\xbf\xa1\xa3\x4a\xb7\x23\xc1\x23\x14\x8a\x16\x22\x26\x9f\x04\xf6\x95\x5b\x19\x0f\xa9\x04\x65\x5e\x6d\x08\xff\x20\x61\xa4\x1d\x4e\xa1\x54\xef\xf5\x8f\xd4\x41\x4a\x4b\x11\x29\x97\x5c\xb8\x0f\xe1\x3a\x1c\x9d\x9e\xbd\x7e\xd3\xc9\xf6\x2c\x23\xae\xfd\xa6\xe0\xd4\x1d\x59\x56\xb7\xcc\xb8\x82\x9b\xee\x44\x1b\x0f\xa6\xb1\xe3\xa0\x94\xdd\xd2\xb4\x75\x3d\x6d\xd4\xd4\x66\x5d\x01\x84\x28\x25\xf1\xb0\x7e\x7b\xeb\xde\x4a\xbb\xe3\xf7\xb5\x31\x87\xbb\x1b\x99\x51\xa6\xd0\x33\xbe\xbc\x81\xdb\xc8\xb2\x6a\x83\x2e\x51\x64\x13\xbb\x86\x7d\x6e\xdf\xab\x21\xe5\xf7\xc8\x9a\x06\x76\xec\xb8\x22\x67\x17\x57\x9f\xfd\xd9\x47\x87\x7e\xa5\x9f\xc7\x77\xdf\xc7\xc3\x6b\x3a\x96\x63\xf6\xeb\x6b\xe7\x62\xfc\x66\x7c\x1f\xfd\xfd\xdb\xc5\xe7\x77\x7d\x5c\x7d\x0e\x66\x7f\xfb\x10\xcd\xba\x0d\xdc\x04\x0f\x1a\xf4\xb4\xa7\x18\xc4\x0d\x0b\xcf\x06\xe8\x9e\x6d\x85\xd2\x98\x2d\x48\x40\x5d\x13\x8b\x4a\x44\xaf\x77\x10\x29\x14\x8c\x04\xa0\xd3\x0e\x0a\xb8\x12\x82\x1b\xea\x34\x38\x09\xf4\xa8\x54\x28\x1e\x16\x9f\x7e\x4d\xa9\x81\xe1\x12\xe2\x92\x5c\x2f\x30\x4c\x9d\xfc\x9f\xc0\xf9\x89\x0d\x27\xaf\x06\x2e\xce\x29\xa3\x5a\x02\x59\x28\xe8\xc1\x21\x20\x57\xd2\xc1\x46\x81\xee\x3f\x78\x0c\x3e\x59\x20\xcc\x10\x19\xc8\x44\xce\x79\x1c\x04\x2b\xc8\xf6\x8f\x6e\xdd\x0d\x9e\x2f\x54\xb4\x74\x94\x1b\xb2\x0a\x38\x71\x1f\xd1\x57\x24\xaa\x68\xe9\x0e\xfe\xad\xa1\x4e\xdd\xff\x64\x4e\x13\xef\xe7\x33\x12\x15\x28\x1f\x8d\xc3\xe4\xb9\x29\x93\x52\xa2\x13\x0b\xaa\x56\x85\x98\x3d\xf8\x0b\x12\x81\x42\x73\xb3\xe1\x9f\x26\x68\xfc\xeb\x07\xd0\xa8\x97\xcf\x56\xcd\x6c\x7d\x78\x98\x3c\xa0\xcc\xf4\xd4\x71\x39\xa2\x83\xc5\x70\xa0\xd1\x91\x02\xcc\xc3\x0d\x00\x4b\x4b\x6b\xa8\x00\x6c\x42\xa5\x02\x12\x04\x06\x5f\xf2\x89\x70\x95\xc6\xb6\x23\x8c\x4a\xec\x88\x10\x64\xb5\x36\x46\x15\x86\x8d\xa5\xcd\x86\x04\x64\x70\x50\xc6\xe2\x70\x0b\xac\xee\x98\x8e\x54\x5c\xd0\xef\xf8\x08\x71\x6f\x4b\x68\x6b\x44\xde\x5d\xe4\x12\x85\x95\x42\x60\x3f\xd8\x35\x25\xf9\x24\xa7\x6b\x3d\xe7\x2c\xd6\xf2\xfe\x8f\x26\xf9\xb2\x8e\xf7\x86\xfe\xd7\xbf\x1e\x1c\xea\x93\x83\xa3\x4f\x64\x92\xd0\x63\x63\x97\xe7\x49\xe0\x6d\x51\xbd\x2b\xc2\xd2\xa0\x29\xa1\x3f\xad\x37\xb8\x18\xa0\xc2\x3d\x1c\xe2\xd2\x10\x1c\x1d\xe2\xd0\x1c\x22\x31\xe4\xcb\xaa\x68\x9f\xdf\x01\xf2\xd2\x24\xc0\x05\x06\xbb\x6a\x93\xac\xa3\x07\xcd\xc5\x89\xe1\x71\xac\x4e\x5e\x7a\x75\x92\x40\xe1\xd9\xca\x93\x8d\xed\x8a\x66\xf4\x5d\x08\xd4\x05\x0a\xc3\x65\x82\x3f\xa3\xa0\xc7\x8b\xcc\x4f\xd1\x8f\xa8\x28\xfc\x47\x42\x73\xcb\x53\xcd\x65\x49\x43\x87\x53\x7e\x36\x9b\x37\xad\x3f\x8f\xa6\x7d\x01\xa6\xdd\x56\x4b\x35\x5b\x37\x2d\xa6\x8e\xd6\x7d\x3a\xeb\x9e\x59\x67\x5b\x88\xae\xb9\x82\x0f\x3c\x66\x8f\x59\x5a\x44\x9c\x32\xd5\xba\xc1\x96\x3d\x09\x84\xa6\x30\x60\x58\x19\xa0\xc0\x6c\x95\x34\xdb\xe8\x03\xdb\x6c\xcf\x85\x19\xb3\x85\x17\x86\x99\x47\x41\x40\xc0\xbd\x5d\xf5\x65\xe9\xc9\x2e\x34\x97\x98\x09\x00\x02\xee\xe5\x65\xe6\x26\x3b\xfe\x1e\xa3\xa8\x1b\x52\x03\xe6\xee\x6e\x7c\x99\xdf\x6e\x2c\xe9\xaa\xbb\x33\x7c\x72\xb4\xc5\x71\x81\xb7\x63\xc9\xda\xc8\xed\x39\x4a\xd6\x28\x05\xce\x33\x55\xad\x39\xd0\xe7\x5c\x84\xbb\x40\x9e\xbe\x8b\x00\xcd\x00\xd7\x1c\x8e\xd8\x2e\x7d\xfe\xe7\xb1\x6d\x30\xf5\x6c\xd5\xfa\xc6\xd3\x58\x23\x8c\xd3\xc3\x18\x31\x30\xde\x86\xe2\xa7\x68\x78\x95\x15\xf7\xa7\x68\x78\x99\x97\x95\xf2\x86\x97\x63\x74\x7d\x50\x1d\xe0\x35\xa8\x1e\x7e\x03\x6c\x4b\x25\xda\x88\xf0\xb4\x10\x3d\x22\xfc\x09\x10\x7e\x80\xcf\x38\x5e\x24\xc2\xb7\x9d\xcb\x1b\x41\x9e\x1e\xcb\xab\x20\x7f\x19\x4f\x39\xfe\xe4\x2e\x71\x7c\xca\xb1\xbf\x0b\xbc\x82\x2f\xdc\xc5\x00\x2e\x0b\x98\x74\x4a\x90\xd1\xfc\xb2\x37\xa2\x12\xde\x6b\x1b\xcd\x41\x69\xae\x7a\xc9\xfb\xac\xe9\xf7\xec\xb5\x9b\xf4\x52\x63\x3c\xfd\x4a\x3c\x64\xce\x2a\xbd\x88\x19\x55\x19\x05\x97\x66\xe5\xec\xd2\xe7\x2c\x21\x59\x07\x51\xed\xc5\xd9\x46\xc8\x6c\x7d\x59\x76\xfd\x35\xd9\xed\x3c\xa2\xf7\x52\x2e\xad\x74\x37\xe9\xd1\xa2\x25\xe9\x67\xee\x67\x2f\xf6\x25\x3b\x6f\x4b\x78\xf1\xf1\xcb\xa7\xf4\xae\xd6\x52\x4e\xd6\x44\x95\x13\x9d\x8f\x41\x21\xc9\xb7\x99\xaa\xb4\x1d\x2d\x32\x8f\x32\x96\xbb\x84\x31\x40\x5b\x61\xad\x77\xc9\xdb\xc3\xff\xff\xb6\x03\xe6\xd8\xb4\x01\x32\xeb\xb6\xd4\xc7\xab\x1d\xab\xe8\xe0\x45\x94\x6d\xa6\x76\x1a\x31\x4e\x62\xc5\xc1\x43\x86\x44\xe8\x32\x64\xb6\x02\x69\xb0\xfe\x58\x78\x39\x1a\x7c\xab\xc1\xf5\xc7\x34\x7d\xdb\x52\x27\x7f\xe9\x30\xcc\xa5\xa6\x4c\xd5\x49\xeb\xf1\x39\xa7\x7d\x6d\xe5\x81\x99\xca\x73\x9d\x5c\xeb\xa4\x33\xce\x83\x75\xba\x39\x09\x64\x96\x39\x89\xa3\xe8\x62\x6d\xaf\xcd\x74\x69\xc2\x2d\xed\x6f\x67\x20\x2c\x45\x3b\x2f\x8a\xd3\x6f\x6e\x7a\xe8\x5d\x77\x81\x9f\xe2\x00\xee\xec\x01\xd8\xed\x4e\xae\xbe\x5d\x4d\xe0\x34\xcb\x2d\x5e\x14\xb7\xb6\x4b\x91\x2f\x5d\xb2\x86\xf9\x8d\x54\xc3\x82\xaa\xb4\x9f\xb6\xe2\x5e\x6b\xc5\x04\xf9\x5b\x27\x25\x20\xed\xb4\x91\x29\xcb\xf2\xce\x50\xcf\x40\xa2\x48\x3e\x79\xb7\xbd\x07\x8a\x86\x9b\xf2\xd0\xcf\x35\x5c\x2e\x61\x5b\x75\xc4\x96\x65\x59\xc3\x12\xc4\xd7\x35\xb9\xd1\x0e\x56\xb3\x78\x27\x16\x50\x09\x32\x9e\x25\x2a\xf9\x05\x86\xfa\x9a\xb8\x2e\x54\x1a\xf6\xfb\x79\x70\x61\x73\xad\xdb\xd6\xc6\x1e\x59\xc3\xb7\x3d\xeb\x5d\x6f\xf4\xfa\x76\x38\xb4\x4f\x4f\xed\xb3\xb7\x7d\xcb\xb2\xba\xcd\x92\x8f\xa7\x5f\x2f\x89\xc2\x0c\x15\x13\xee\xb5\x4e\x49\x07\x66\x56\x43\x50\xcf\x48\x59\x5f\xb3\x35\x36\x24\x8a\x3a\x8f\x23\x44\x32\x88\x68\x83\xb6\x8c\x1b\x7c\xc9\x50\xdc\x95\xbb\xca\x3a\x76\x38\x28\xe5\x2d\xcd\xa3\xbe\x40\x22\xf3\x60\x52\xca\x06\x45\x51\x5b\xab\x96\x05\xd7\x0b\x5e\x17\x33\xa9\x98\x5d\xc7\xe1\x2c\xd5\x4d\x0f\xe6\x31\x73\x29\xf3\xa6\x3c\x16\x0e\x56\xa9\xa6\x8e\x8f\x6e\x1c\x64\x77\x95\x20\x94\x51\xe6\x99\xea\xbe\x32\xbf\x32\x72\x49\xe5\xfd\x94\x7e\xaf\x8f\x5d\xb1\x05\x15\x9c\x85\x98\xc7\x3f\x16\x87\x1f\x6f\xee\x64\x7a\x15\x10\xe6\xc5\xc4\xcb\x37\xf1\x47\x84\x8e\xba\x7d\xae\x10\x59\x31\xc6\x43\x16\xda\x14\x3b\x33\x7b\xfe\x74\xe4\xc1\xc6\x6a\xe4\x61\x7e\x28\x50\x43\x22\x75\x42\xca\x12\xd6\xbf\xc0\xc8\xf8\xa4\xb9\x80\xa2\x0f\xa0\x41\xda\x7a\x87\xb7\x3e\x66\x88\x03\x86\xc5\xf9\x73\xaf\xfa\x42\x17\xc7\xdd\x47\xa9\x37\xf7\xaa\xe9\x75\xf4\x1b\xae\x1d\x02\x0b\xa7\x6b\x2d\xbf\xf9\x53\xe7\x9b\x84\x30\xdb\x47\xee\xaa\x6d\xb9\x50\x31\x2b\x81\xad\xe2\xd9\x3b\x59\x84\x11\x49\x04\xf9\xf4\xe5\x53\xb7\xba\x91\x2c\x0e\xd4\x79\xd4\x5a\x13\xcd\x3d\x19\xa9\x88\x50\x1a\x93\x4d\x9d\x9d\x86\x6e\x4c\xe6\x4d\x6e\x01\xe3\xba\xae\x32\x97\xb0\x86\xe5\xbe\x0c\x32\xf7\xe7\x2c\x73\x9a\x3b\x5b\xa8\xe3\xdb\xb9\x70\x7c\xaa\xd0\x51\xb1\xd8\xc3\xbc\xd7\xd7\x15\x26\x13\xb2\x5a\x37\xeb\x46\xc7\x3c\xcd\xa2\x92\x6c\xbd\xe0\xdd\x2c\x66\x2a\x86\xe1\x9b\xbe\x75\x56\x2a\xba\x4d\x84\x6e\x5f\x05\x7f\x1b\x5f\x8e\xcf\xe1\x16\x65\x40\xe0\xdb\xb0\x88\x3a\x18\x71\xc7\xdf\x2b\x8c\x0d\x75\xf1\x0e\xa7\xe0\xf3\x58\x54\xb8\xe8\x54\xb1\x5b\x11\x21\x49\x8e\x68\xe9\xad\x19\x51\x6d\x29\x6b\x2a\x6c\x48\x62\x7b\x05\x2a\x3e\x9f\x53\x87\x04\x10\x11\x0f\xc1\xe5\x4b\x56\x6e\xb3\x35\xe6\xc1\x87\x9c\x58\x88\x22\xb7\x7a\x72\x5b\xc9\xc6\x21\xf1\xb0\x59\x8a\x4a\x6b\x71\x97\x04\xa3\xe2\x08\xdc\x90\xb7\xdb\x2b\x0a\x99\xe4\x62\x1e\xf0\x65\x1e\xcb\x93\x5c\xdf\xc2\xd0\x49\x18\x1a\xd5\xa4\xd8\x4b\x1b\xd3\x38\x42\xb1\xa0\xb2\x48\x25\x59\x71\xd1\x9a\xc5\xcd\x4a\xf9\x3c\x4f\x28\x45\x31\x72\x70\x21\xf0\xec\x49\x42\xe0\xf0\x4d\xb7\xf3\x0a\x2e\x78\x18\x71\x86\x4c\xc9\x8e\x93\x7f\xd5\x8b\x65\x8f\x2a\xa6\xd9\xbf\x71\x80\xf2\x93\x8a\x4e\x59\x0e\xf3\xef\x1d\x52\xb5\x98\xd9\x36\xcc\xcc\xd4\x4e\xe7\xbf\x01\x00\x00\xff\xff\x3a\xd3\xe8\xbf\x3b\x44\x00\x00")

func apiSwaggerSpecV1YmlBytes() ([]byte, error) {
	return bindataRead(
		_apiSwaggerSpecV1Yml,
		"api/swagger-spec/v1.yml",
	)
}

func apiSwaggerSpecV1Yml() (*asset, error) {
	bytes, err := apiSwaggerSpecV1YmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "api/swagger-spec/v1.yml", size: 17467, mode: os.FileMode(420), modTime: time.Unix(1541583677, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"api/swagger-spec/v1.yml": apiSwaggerSpecV1Yml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"api": &bintree{nil, map[string]*bintree{
		"swagger-spec": &bintree{nil, map[string]*bintree{
			"v1.yml": &bintree{apiSwaggerSpecV1Yml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

