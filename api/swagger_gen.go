// Code generated by go-bindata.
// sources:
// api/swagger-spec/v1.yml
// DO NOT EDIT!

package swagger

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _apiSwaggerSpecV1Yml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\x5d\x53\xe3\x3a\xd2\xbe\xcf\xaf\xe8\x62\xde\xaa\xdc\x1c\x12\x27\xc0\xbc\x33\xb9\x1a\x16\x98\x99\xb0\x0c\x43\x1d\x60\x76\xb7\xb6\xf6\x42\xb1\x3b\xb6\x0e\xb6\xe4\x23\xc9\xc9\xc9\x6c\xed\x7f\xdf\x92\xfc\xed\x28\x89\xc3\x30\x10\xce\x26\x17\x10\x5b\xea\x56\xab\xfb\xe9\x0f\xb5\x0d\x72\x4e\x7c\x1f\xc5\x08\xba\xc3\x9e\xd3\xed\x50\x36\xe5\xa3\x0e\x80\x87\xd2\x15\x34\x56\x94\xb3\x11\x9c\x7d\xfa\xf2\x19\x3e\x72\x11\x49\x38\xbd\x19\x77\x00\x66\x28\xa4\x19\x19\xf4\x9c\x9e\xd3\x01\x50\x54\x85\x68\x99\xa8\x50\x44\xf2\xeb\xf4\x16\xc5\x8c\xba\x38\x82\x40\xa9\x78\xd4\xef\x87\xdc\x25\x61\xc0\xa5\xea\x00\xb8\x9c\x29\xe2\x2a\xbd\x28\x00\x46\x84\x86\x23\x78\x58\x84\xd8\x9b\x7c\xa0\x6c\x4e\x99\x54\xc4\x7d\xe8\xb9\x3c\xea\x00\x84\xd4\x45\x26\x31\x9d\xcb\x48\x84\x23\x38\x8d\x89\x1b\x20\x0c\x8d\x18\x00\x89\x08\x8b\x55\xe6\xf3\x79\x8f\x98\xe1\x1e\x17\x7e\x3f\x23\x96\xfd\xab\xf1\xd9\xc5\xf5\xed\xc5\xe1\xb0\xe7\xf4\x02\x15\x85\x1d\x2d\xc9\x08\x4a\xa1\x14\xf1\xe5\xa8\x73\x98\xaf\x90\xa8\xa0\xa9\x91\x7b\x89\xc2\x0c\x20\x53\xd4\x25\xfa\xa6\xd9\x71\x4e\xa3\xc7\xed\x34\x95\x49\x57\x38\xc3\xd0\x3a\xcb\x8c\xd4\xe6\xde\x70\xca\x94\x75\xae\x19\x59\x9e\x7b\xc5\xfd\x35\xd3\xaf\xb8\x5f\x23\xd1\x36\xb3\x4e\xd7\x03\x66\xe6\x1b\xfd\x13\x6e\xdd\x00\x23\x94\x1d\x99\xfe\xd6\x4a\xd2\xca\xee\xc4\x44\x05\x52\x9b\xe5\xa0\x4f\x12\x15\xf4\x43\xee\x53\x76\x90\xda\x29\xd6\xda\x35\xdf\x00\x52\xcd\xa6\xdf\x0f\x73\xcd\xea\x8f\x4c\xa2\x88\x88\xc5\x08\xba\x66\x59\x43\xdf\xcd\xc6\x5c\xce\x64\x62\x56\xcb\x09\x49\x1c\x87\x99\xda\xfb\xbf\x49\xce\xb2\x81\x58\x70\x2f\x71\xdb\x4c\x24\x82\x44\xa8\x50\x54\xa6\x52\x36\x82\x09\xf7\x16\xd9\x8d\x1c\x5f\xb5\x5b\x02\x7f\x4f\xa8\x40\x6f\x04\x4a\x24\x58\xdc\x36\xda\x20\xa3\xe2\x1a\x40\x2d\x62\x1c\x01\x9f\xfc\x86\xae\xaa\xdc\x8e\x05\x8f\x51\x28\x5a\x8a\x98\x7e\x52\xd8\xd7\x6e\xe5\x3c\xa4\x12\x94\xf9\x8d\x21\xfc\x83\x44\xb1\x76\x38\x85\x52\x7d\xd0\x3f\x32\x07\xa9\x2c\x45\xa4\x9c\x73\xe1\x3d\x86\xeb\x60\x78\x74\x7c\xf2\xb6\x93\xef\x59\xc6\x5c\xfb\x4d\xc9\xa9\x3b\x74\x9c\x6e\x95\x71\x0d\x37\xdd\x2b\x6d\x3c\xb8\x4d\x5c\x17\xa5\xec\x56\xa6\x2d\xeb\x69\xa5\xa6\x56\xeb\x0a\x20\x42\x29\x89\x8f\xcd\xdb\x6b\xf7\x56\xd9\x1d\x7f\x68\x8c\xb9\xdc\x5b\xc9\x8c\x32\x85\xbe\xf1\xe5\x15\xdc\x86\x8e\xd3\x18\xf4\x88\x22\xab\xd8\x59\xf6\xb9\x7e\xaf\x86\x94\x3f\x20\xb3\x0d\x6c\xd8\x71\x4d\xce\x2e\x2e\x2e\x83\xc9\x27\x97\x7e\xa5\x97\xe3\xfb\xef\xe3\xc1\x35\x1d\xcb\x31\xfb\xf5\xc4\x3d\x1b\xbf\x1d\x3f\xc4\x7f\xff\x76\x76\xf9\xbe\x87\x8b\xcb\x70\xf2\xb7\x8f\xf1\xa4\x6b\xe1\x26\x78\x68\xd1\xd3\x96\x62\x10\x2f\x2a\x3d\x1b\xa0\x7b\xbc\x16\x4a\x63\x36\x23\x21\xf5\x4c\x2c\xaa\x10\x9d\x6c\x20\x52\x28\x18\x09\x41\xa7\x1d\x14\x70\x21\x04\x37\xd4\x59\x70\x12\xe8\x53\xa9\x50\x3c\x2e\x3e\xfd\x9a\x51\x03\xc3\x39\x24\x15\xb9\x5e\x61\x98\x3a\xf8\x3f\x81\xd3\x83\x11\x1c\xbc\xe9\x7b\x38\xa5\x8c\x6a\x09\x64\xa9\xa0\x47\x87\x80\x42\x49\x3b\x1b\x05\xba\xff\xe0\x09\x04\x64\x86\x30\x41\x64\x20\x53\x39\xa7\x49\x18\x2e\x20\xdf\x3f\x7a\x4d\x37\x78\xb9\x50\xd1\xd2\x51\x6e\xc8\x22\xe4\xc4\x7b\x42\x5f\x91\xa8\xe2\xb9\xd7\xff\xb7\x86\x3a\xf5\xfe\x93\x3b\x4d\xb2\x9d\xcf\x48\x54\xa0\x02\x34\x0e\x53\xe4\xa6\x5c\x4a\x89\x6e\x22\xa8\x5a\x94\x62\x1e\xc2\x5f\x90\x08\x14\x9a\xdb\x08\xfe\x69\x82\xc6\xbf\x7e\x00\x8d\x7a\xf9\x7c\xd5\xdc\xd6\xbb\x87\xc9\x1d\xca\x4c\xcf\x1d\x97\x63\xda\x9f\x0d\xfa\x1a\x1d\x19\xc0\x7c\x5c\x01\xb0\xac\xb4\x86\x1a\xc0\xae\xa8\x54\x40\xc2\xd0\xe0\x4b\x3e\x13\xae\xb2\xd8\xb6\x87\x51\x85\x1d\x11\x82\x2c\x96\xc6\xa8\xc2\xc8\x5a\xda\xac\x48\x40\x06\x07\x55\x2c\x0e\xd6\xc0\xea\x9e\xe9\x48\xc5\x05\xfd\x8e\x4f\x10\xf7\xd6\x84\x36\x2b\xf2\xee\x63\x8f\x28\xac\x15\x02\xdb\xc1\xce\x96\xe4\xd3\x9c\xae\xf5\x5c\xb0\x58\xca\xfb\x3f\x9a\xe4\xab\x3a\xde\x1a\xfa\x5f\xff\xba\x73\xa8\x4f\x0f\x8e\x01\x91\x69\x42\x4f\x8c\x5d\x5e\x26\x81\xb7\x45\xf5\xa6\x08\x4b\x43\x5b\x42\x7f\x5e\x6f\xf0\x30\x44\x85\x5b\x38\xc4\xb9\x21\xd8\x3b\xc4\xae\x39\x44\x6a\xc8\xd7\x55\xd1\xbe\xbc\x03\x14\xa5\x49\x88\x33\x0c\x37\xd5\x26\x79\x47\x0f\xec\xc5\x89\xe1\xb1\xaf\x4e\x5e\x7b\x75\x92\x42\xe1\xc5\xca\x93\x95\xed\x0a\x3b\xfa\xce\x04\xea\x02\x85\xe1\x3c\xc5\x9f\x51\xd0\xd3\x45\xe6\xe7\xe8\x47\xd4\x14\xfe\x23\xa1\xb9\xe5\xa9\xe6\xbc\xa2\xa1\xdd\x29\x3f\xed\xe6\xcd\xea\xcf\xbd\x69\x5f\x81\x69\xd7\xd5\x52\x76\xeb\x66\xc5\xd4\xde\xba\xcf\x67\xdd\x63\xe7\x78\x0d\xd1\x35\x57\xf0\x91\x27\xec\x29\x4b\x8b\x98\x53\xa6\x5a\x37\xd8\xf2\x27\x81\x60\x0b\x03\x86\x95\x01\x0a\x4c\x16\x69\xb3\x8d\x3e\xb2\xcd\xf6\x52\x98\x31\x5b\x78\x65\x98\x79\x12\x04\x84\xdc\xdf\x54\x5f\x56\x9e\xec\x82\xbd\xc4\x4c\x01\x10\x72\xbf\x28\x33\x57\xd9\xf1\xf7\x04\x45\xd3\x90\x1a\x30\xf7\xf7\xe3\xf3\xe2\xb6\xb5\xa4\xab\xef\xce\xf0\x29\xd0\x96\x24\x25\xde\xf6\x25\xab\x95\xdb\x4b\x94\xac\x71\x06\x9c\x17\xaa\x5a\x0b\xa0\x4f\xb9\x88\x36\x81\x3c\x7b\x17\x01\xec\x00\xd7\x1c\xf6\xd8\xae\x7c\xfe\xe7\xb1\x6d\x30\xf5\x62\xd5\xfa\xca\xd3\x98\x15\xc6\xd9\x61\x8c\x18\x18\xaf\x43\xf1\x73\x34\xbc\xaa\x8a\xfb\x53\x34\xbc\xcc\xcb\x4a\x45\xc3\xcb\x35\xba\xde\xa9\x0e\xf0\x12\x54\x77\xbf\x01\xb6\xa6\x12\xb5\x22\x3c\x2b\x44\xf7\x08\x7f\x06\x84\xef\xe0\x33\x8e\x57\x89\xf0\x75\xe7\x72\x2b\xc8\xb3\x63\x79\x1d\xe4\xaf\xe3\x29\xc7\x9f\xdc\x25\xf6\x4f\x39\xb6\x77\x81\x37\xf0\x85\x7b\x18\xc2\x79\x09\x93\x4e\x05\x32\x9a\x5f\xfe\x46\x54\xca\x7b\x69\xa3\x05\x28\xcd\xd5\x61\xfa\x3e\x6b\xf6\x3d\x7f\xed\x26\xbb\xd4\x18\xcf\xbe\x12\x1f\x99\xbb\xc8\x2e\x12\x46\x55\x4e\xc1\xa5\x59\x39\xbf\x0c\x38\x4b\x49\x96\x41\xd4\x78\x71\xd6\x0a\x99\xb5\x2f\xcb\x2e\xbf\x26\xbb\x9e\x47\xfc\x41\xca\xb9\x93\xed\x26\x3b\x5a\xb4\x24\xbd\xe4\x41\xfe\x62\x5f\xba\xf3\xb6\x84\x67\x9f\xbe\x7c\xce\xee\x6a\x2d\x15\x64\x36\xaa\x82\xe8\x74\x0c\x0a\x49\xb1\xcd\x4c\xa5\xed\x68\x91\xf9\x94\xb1\xc2\x25\x8c\x01\xda\x0a\xeb\xbc\x4f\xdf\x1e\xfe\xff\x77\x1d\x30\xc7\xa6\x15\x90\x59\xb6\xa5\x3e\x5e\x6d\x58\x45\x07\x2f\xa2\x46\x66\x6a\xc7\x8a\x71\x92\x28\x0e\x3e\x32\x24\x42\x97\x21\x93\x05\x48\x83\xf5\xa7\xc2\xcb\xde\xe0\x6b\x0d\xae\x3f\xa6\xe9\xdb\x96\x3a\xfd\x4b\x87\x41\x21\x35\x65\xaa\x49\xda\x8c\xcf\x05\xed\x89\x53\x04\x66\x2a\x4f\x75\x72\x6d\x92\x4e\x38\x0f\x97\xe9\xa6\x24\x94\x79\xe6\x24\xae\xa2\xb3\xa5\xbd\xda\xe9\xb2\x84\x5b\xd9\xdf\xc6\x40\x58\x89\x76\x7e\x9c\x64\xdf\xbc\xec\xd0\xbb\xec\x02\x3f\xc5\x01\xbc\xc9\x23\xb0\xdb\xbd\xba\xf8\x76\x71\x05\x47\x79\x6e\xf1\xe3\xa4\xb5\x5d\xca\x7c\xe9\x91\x25\xcc\xaf\xa4\x1a\x94\x54\x95\xfd\xb4\x15\xf7\x5a\x2b\x26\x2c\xde\x3a\xa9\x00\x69\xa3\x8d\x4c\x59\x56\x74\x86\x0e\x0d\x24\xca\xe4\x53\x74\xdb\x0f\x41\xd1\x68\x55\x1e\xfa\xb9\x86\x2b\x24\x6c\xab\x8e\xc4\x71\x1c\x67\x50\x81\xf8\xb2\x26\x57\xda\xc1\xb1\x8b\x77\xe0\x00\x95\x20\x93\x49\xaa\x92\x5f\x60\xa0\xaf\x89\xe7\x41\xad\x61\xbf\x9d\x07\x97\x36\xd7\xba\x6d\x6d\xec\xa1\x33\x78\x77\xe8\xbc\x3f\x1c\x9e\xdc\x0d\x06\xa3\xa3\xa3\xd1\xf1\xbb\x9e\xe3\x38\x5d\xbb\xe4\xe3\xdb\xaf\xe7\x44\x61\x8e\x8a\x2b\xee\xb7\x4e\x49\x3b\x66\x56\x43\xd0\xcc\x48\x79\x5f\xb3\x35\x36\x24\x8a\x26\x8f\x3d\x44\x72\x88\x68\x83\xb6\x8c\x1b\x7c\xce\x50\xdc\x57\xbb\xca\x3a\x76\xb8\x28\xe5\x1d\x2d\xa2\xbe\x40\x22\x8b\x60\x52\xc9\x06\x65\x51\x5b\xaf\x96\xdd\x80\x08\xbf\x98\x24\xb8\x5e\xfd\xba\x24\xa3\x62\x72\x9d\x44\x93\x4c\x51\x87\x30\x4d\x98\x47\x99\x7f\xcb\x13\xe1\x36\xa8\x6e\xdd\x00\xbd\x24\xcc\xef\x2a\x41\x28\xa3\xcc\x37\xa5\x7e\x6d\x7e\x6d\xe4\x9c\xca\x87\x5b\xfa\xbd\x39\x76\xc1\x66\x54\x70\x16\x61\x11\x0c\x59\x12\x7d\xba\xb9\x97\xd9\x55\x48\x98\x9f\x90\x42\x70\xfc\x23\x46\x57\xdd\xbd\x54\xbc\xac\x59\xe6\x31\x0b\xad\x0a\xa4\xb9\x71\x7f\x3a\x0c\x61\x65\x69\xb2\xb2\x0c\x5b\xe7\x93\x02\x35\x22\x32\x87\xa4\x2c\xe5\xfc\x0b\x0c\x8d\x7f\x9a\x8b\xb2\x25\xa0\xf1\xda\x7a\x7f\x77\x01\xe6\x78\x03\x86\xe5\x51\x74\xab\x52\x43\xd7\xc9\xdd\x27\x29\x3d\xb7\x2a\xef\x75\x20\x1c\x34\x23\x61\xea\x7f\x4d\x16\x8d\x33\xbd\xbd\x99\x91\x82\xde\xd6\x0f\xb1\x75\x18\xca\x00\x77\x52\x6b\x2f\x10\x57\x25\x24\xdc\x9e\x4b\x59\x0b\x57\xa2\x46\x6b\x13\x98\x3f\xdc\xbe\x49\x09\x73\x53\x14\xb1\xa6\x2d\x17\x2a\x26\x15\x6f\xa9\x85\xa6\x8d\x2c\xa2\x98\xa4\x82\x7c\xfe\xf2\xb9\x5b\xdf\x48\x1e\xc8\x1e\x65\x14\xa9\x88\x50\xda\xa9\x6c\x1a\xb5\xf4\x96\xf2\x70\xe0\x95\x7e\xd8\xd4\x55\xee\xd3\xce\xa0\xda\x65\x42\xe6\xfd\x9c\x65\x8e\x8a\x68\x11\xe9\x00\x7d\x2a\xdc\x80\x2a\x74\x55\x22\xb6\x30\xef\xf5\x75\x8d\xc9\x15\x59\x2c\x9b\x75\x65\x0a\x3e\xca\xc3\xaa\x6c\xbd\xe0\xfd\x24\x61\x2a\x81\xc1\xdb\x9e\x73\x5c\x39\x42\x98\x14\xd3\xbe\xa6\xff\x36\x3e\x1f\x9f\xc2\x1d\xca\x90\xc0\xb7\x41\x19\x36\x31\xe6\x6e\xb0\x55\x1c\x1e\xe8\xa3\x08\x1c\x41\xc0\x13\x51\xe3\xa2\x73\xdd\x66\x45\x44\x24\x3d\x70\x66\xb7\x26\x44\xb5\xa5\x6c\xa8\xd0\x92\x85\xb7\x8a\xb5\x7c\x3a\xa5\x2e\x09\x21\x26\x3e\x82\xc7\xe7\xac\xda\x34\xb4\x26\xf2\xc7\x9c\xbf\x88\x22\x77\x7a\x72\x5b\xc9\xc6\x11\xf1\xd1\x2e\x45\xad\x51\xba\x49\x82\x61\x19\xc4\x2c\x85\x47\x7b\x45\x21\x93\x5c\x4c\x43\x3e\x2f\xd2\x51\x5a\xac\xb4\x30\x74\x1a\x86\x86\x0d\x29\xb6\xd2\xc6\x6d\x12\xa3\x98\x51\x59\x66\xc3\xbc\x3a\x6a\xcd\xe2\x66\xa1\x02\x5e\xe4\xc4\xb2\x9a\xda\xb9\x10\x78\xfc\x2c\x21\x70\xf0\xb6\xdb\x79\x03\x67\x3c\x8a\x39\x43\xa6\x64\xc7\x2d\xbe\xea\xc5\xf2\x07\x2f\xb7\xf9\x3f\xa5\x80\xea\x73\x97\x4e\x55\x0e\xf3\xcf\x2a\x32\xb5\x98\xd9\x23\x98\x98\xa9\x9d\xce\x7f\x03\x00\x00\xff\xff\x8c\x84\x64\x3f\x09\x45\x00\x00")

func apiSwaggerSpecV1YmlBytes() ([]byte, error) {
	return bindataRead(
		_apiSwaggerSpecV1Yml,
		"api/swagger-spec/v1.yml",
	)
}

func apiSwaggerSpecV1Yml() (*asset, error) {
	bytes, err := apiSwaggerSpecV1YmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "api/swagger-spec/v1.yml", size: 17673, mode: os.FileMode(420), modTime: time.Unix(1541986664, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"api/swagger-spec/v1.yml": apiSwaggerSpecV1Yml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"api": &bintree{nil, map[string]*bintree{
		"swagger-spec": &bintree{nil, map[string]*bintree{
			"v1.yml": &bintree{apiSwaggerSpecV1Yml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

