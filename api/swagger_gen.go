// Code generated by go-bindata.
// sources:
// api/swagger-spec/v1.yml
// DO NOT EDIT!

package swagger

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _apiSwaggerSpecV1Yml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\x5b\x73\x1a\x3b\x12\x7e\xe7\x57\x74\x39\x5b\xc5\x6e\xd5\x31\x0c\x60\xe7\xc2\x53\xbc\xb6\xe3\x90\x75\x6c\xef\xc1\xce\x6e\xd5\xd6\x56\x4a\x33\xd3\x80\xe2\x19\x69\x22\x69\xe0\x90\xad\xfd\xef\xa7\xa4\xb9\xc3\x00\x03\x21\xc6\x17\xfc\x90\x30\x23\x75\x4b\xea\xfe\xfa\xa2\x96\x40\x4e\xc8\x70\x88\xa2\x0b\xf5\x76\xc3\xaa\xd7\x28\x1b\xf0\x6e\x0d\xc0\x45\xe9\x08\x1a\x28\xca\x59\x17\x4e\x2f\x3e\x7f\x84\x0f\x5c\xf8\x12\x4e\x6e\x7a\x35\x80\x31\x0a\x69\x5a\x5a\x0d\xab\x61\xd5\x00\x14\x55\x1e\x96\x74\x54\x28\x7c\x79\x3d\xe8\xa3\x18\x53\x07\xbb\x30\x52\x2a\xe8\x36\x9b\x1e\x77\x88\x37\xe2\x52\xd5\x00\x1c\xce\x14\x71\x94\x1e\x14\x00\x7d\x42\xbd\x2e\xdc\x4f\x3d\x6c\xd8\xef\x29\x9b\x50\x26\x15\x71\xee\x1b\x0e\xf7\x6b\x00\x1e\x75\x90\x49\x8c\xfa\x32\xe2\x63\x17\x4e\x02\xe2\x8c\x10\xda\x66\x1a\x00\xa1\xf0\xd2\x51\x26\x93\x49\x83\x98\xe6\x06\x17\xc3\x66\x4c\x2c\x9b\x97\xbd\xd3\xf3\xab\xfe\xf9\x61\xbb\x61\x35\x46\xca\xf7\x6a\x7a\x26\x5d\xc8\x26\xa5\xc8\x50\x76\x6b\x87\xc9\x08\xa1\x1a\xcd\x4a\xe4\x4e\xa2\x30\x0d\xc8\x14\x75\x88\x7e\x69\x56\x9c\xd0\xe8\xf6\x72\x9a\x5c\xa7\x4b\x1c\xa3\x57\xda\xcb\xb4\x14\xfa\xde\x70\xca\x14\x7c\xa4\x52\x09\x3e\x2d\xa5\xc9\x7a\x70\x31\x2d\xd0\x6a\x85\x94\x92\xe8\x06\xd3\xf3\x95\xfe\x17\xfa\xce\x08\x7d\x94\x35\x19\xfd\xaf\x25\xa0\x25\x59\x0b\x88\x1a\x49\x2d\xf3\x83\x26\x09\xd5\xa8\xe9\xf1\x21\x65\x07\x91\x12\x02\x2d\x3a\xf3\x09\x20\x12\x5b\xf4\xf9\x30\x11\x9b\xfe\x93\xa1\xef\x13\x31\xed\x42\xdd\x0c\x6b\xe8\xeb\x71\x9b\xc3\x99\x0c\xcd\x68\x09\x21\x09\x02\x2f\x96\x69\xf3\x9b\xe4\x2c\x6e\x08\x04\x77\x43\xa7\x4a\x47\x22\x88\x8f\x0a\x45\xae\x2b\x65\x5d\xb0\xb9\x3b\x8d\x5f\x24\xe0\x29\xbc\x12\xf8\x3d\xa4\x02\xdd\x2e\x28\x11\x62\xfa\xda\x48\x83\x74\xd3\x67\x80\x83\xbf\x08\x1c\x1c\x74\xe1\xe0\x55\xd3\xc5\x01\x65\x54\xcf\x40\xc6\x62\xa9\x25\xcc\x64\xc0\x35\xda\x32\xc2\x7a\xdb\xb2\xea\x79\x3e\x05\x85\xd4\xfb\xa1\xe3\xa0\x94\xf5\x5c\x87\xf9\xa1\x01\xd4\x34\xc0\x2e\x70\xfb\x1b\x3a\xaa\xd0\x10\x08\x1e\xa0\x50\x34\x3f\x64\xf4\xe7\xa3\x94\x64\x88\xb3\xaf\x13\x5e\x52\x09\xca\x86\x73\x8d\xf8\x07\xf1\x03\x6d\xd4\xf5\xeb\xfb\xfa\x4c\xab\xc3\xdd\x85\xec\x28\x53\x38\x34\xe8\x5f\xc0\xaf\x6d\x59\x33\x8d\x2e\x51\x64\x11\xbb\x92\x95\x2e\x5f\xad\x21\xe5\xf7\xc8\xca\x1a\x56\xac\xb9\xb8\x6e\x9c\x7e\x1a\xd9\x17\x0e\xbd\xa6\x9f\x7a\x77\x3f\x7a\xad\x2b\xda\x93\x3d\xf6\xfb\xb1\x73\xda\x7b\xdd\xbb\x0f\xfe\xfd\xe5\xf4\xd3\xbb\x06\x4e\x3f\x79\xf6\xbf\x3e\x04\x76\x26\xa3\xfa\xd1\x52\x45\xf7\xd8\x98\x78\xd4\x85\x73\xed\xeb\x80\x0b\xb8\x21\x52\x4e\xb8\x70\x0b\x1c\x3a\x4b\x38\x18\x2b\x62\x5c\x01\x71\x14\x1d\x13\x85\x79\xd2\xe3\x15\x83\x2b\x14\x8c\x78\xa0\x5d\x32\x0a\x38\x17\x82\x8b\x7a\x66\xdb\x02\x87\x54\x2a\x14\x9b\x99\xf7\xef\x31\x35\x30\x9c\x40\x28\x51\x3c\x3f\x2b\x4f\x05\xb4\x37\xf4\x75\x0c\xbd\xa2\x4d\xdc\x90\xa9\xc7\xc9\x36\xe1\x2c\x51\x25\x58\x0e\xd7\x83\xb2\x44\x05\x6a\x84\x06\xc7\x10\xcc\xd8\xe8\x73\x02\xb4\x16\xd1\xf3\x43\x33\xbf\xdf\x31\x96\x31\xf1\xef\xdc\x73\xe7\xf0\xf3\xd3\xc8\x1e\x70\xe1\xe0\xda\xf0\x46\x27\x14\x54\x4d\xb3\x61\x0f\xe1\xef\x48\x04\x0a\xdd\xa9\x0b\xff\x39\x71\x7d\xca\xfe\x3b\x67\x0c\x1f\xf4\x60\x20\x5e\x8a\x49\xe4\x64\xbb\xb7\x8b\x9d\x27\x73\x09\xce\xb6\x91\xcf\x6d\x98\xaa\xfd\x3a\x53\x0e\x68\x73\xdc\x6a\x6a\x7b\x8a\xcd\x78\x88\x0b\xcc\x38\xde\x52\x42\xc1\x30\x2f\xa9\x54\x40\x3c\xcf\x58\x64\x0a\xb6\xf5\xcc\x7c\x6d\x6c\xc7\xd0\xde\x23\x3b\xc7\x8e\x08\x41\xa6\x73\x6d\x54\xa1\x5f\x8a\xe9\x05\x8e\xc7\xe0\x20\x0f\xce\xd6\xb2\x5d\x00\xd3\x81\x80\x0b\xfa\x63\x1b\xf9\xff\x92\x00\x52\x8a\xbc\xbb\xc0\x25\x0a\x0b\x49\x7e\x99\xbb\x8e\xbc\xb3\x96\x5c\x3a\xa5\x39\x0f\xfe\xb3\xee\x5a\xcf\xe1\xab\xde\xa9\x6c\xec\xad\xaf\xff\xf1\xe8\xc0\x1c\x6d\xf2\x46\x44\x82\x8d\xc8\x20\x34\xe2\x76\x77\xb2\x11\xaf\x0a\xd6\x55\x9e\x94\x7a\x65\x09\xfe\xc3\x82\xdc\x45\x0f\x15\xae\x81\xf3\x33\x43\x50\xc0\xf9\x4a\xf7\x4a\xf2\xee\xf5\x97\x5b\xc5\x46\xe8\x0c\x43\x5a\x12\x50\xab\x41\x33\xb4\x2c\xcb\x6a\x3d\x27\x5b\xe3\x3b\xdd\xf8\xee\xde\x2e\x0a\x89\x48\xf3\x7f\x1a\x1c\xff\xdf\x24\x1f\xb9\x40\x15\xed\x0d\xec\xa9\x41\xd8\x3e\xc3\x78\x48\xff\xbb\x23\xbc\x48\x45\x54\x28\x57\xed\x42\x4b\x9d\x6b\x3f\xc1\x4b\xc4\xe3\xaf\xa6\x9e\x89\x4d\xdb\xe3\xce\xfd\xdf\xb6\xe7\x6e\x1f\x62\xcf\x68\x92\x90\x58\x14\x5b\x70\x8d\x15\x37\x26\x67\x44\x91\xc7\xe0\x33\x04\xf7\x70\x23\x04\xe4\xd2\x48\xd0\x4c\x9e\xa0\xd2\xcd\xda\x5f\x9e\xca\x3d\x1c\xa3\xf7\xd3\x3a\x37\x5c\x9e\xa0\xd2\xa3\xd5\xbf\x3c\xad\x07\x9c\xb2\x95\x15\xc7\x95\x5a\x37\x5c\x9e\xa0\xd6\xa3\xd5\xbf\x2c\xad\xe7\xed\x7c\x61\x32\x98\x5c\x65\x80\xf2\xea\x94\xe1\x51\xbd\x3c\x45\xf6\xe5\xa9\x47\x59\x9e\x2a\x38\xbd\x87\xaf\x4f\x2d\x3c\x8b\x2e\x47\xdf\xa9\x40\xed\x70\x18\x4e\x22\xfc\x19\x01\x3d\x2d\xa7\xf3\x82\xa2\xcc\x92\x70\x52\xae\xde\x38\x9e\xec\x55\xfb\x04\x54\xbb\xac\xea\x56\xae\xdd\xb8\xec\xb6\xd7\xee\xc3\x69\xf7\xc8\x3a\x5a\x42\x74\xc5\x15\x7c\xe0\x21\xdb\x66\x6a\x61\xd2\xa9\x51\x74\x63\x71\x55\x86\x31\x7b\x01\x12\xca\x33\x0d\xc3\x12\x62\x9e\xcb\x0e\x26\x34\x0a\xbe\x87\x28\x66\x61\xa0\xf3\xbc\xbb\xbb\xde\x59\xfa\xba\x34\xb8\x17\x57\xfa\x4f\xcd\xc7\xd4\xbc\x74\x72\x1b\x86\x34\x15\xd2\x3e\x79\x29\xe5\xb6\x8b\xe4\xc5\x20\xe3\x6b\x82\xb6\x1d\x27\xd5\x03\x2e\xfc\x55\x88\x8f\xaf\xed\x42\x39\xd0\x35\x07\xf9\x50\x00\xff\xbe\x07\x78\x81\xd9\xa3\x04\xb8\xc1\xd4\xe3\x4b\xce\x4b\x61\x1c\xe7\xe6\xc4\xc0\x78\xd7\xe7\xc7\x79\xc1\x3d\x8b\xe3\x2c\x73\xaf\x3f\x3d\x3a\x76\x8c\xac\x1f\xd5\xd1\xf1\x1c\x54\x1f\xff\x11\xd9\x92\xfd\x49\x29\xc2\xe3\xed\xc9\x1e\xe1\x0f\x80\xf0\x47\x78\x39\xe2\x49\x22\x7c\xd9\x36\xad\x14\xe4\xf1\x2e\xad\x08\xf2\x47\x76\x3d\xe2\x65\x9a\x44\xa4\xca\xdd\x98\x44\xe9\xe2\x9f\x80\x09\xbc\x82\xcf\xdc\x45\x0f\xce\x32\x98\xd4\x72\x90\xd1\xfc\xcc\x77\xbc\x22\xc6\x73\xab\x4c\x11\x69\x9e\x0e\xa3\x4b\xa3\xf1\xe7\xe4\xce\x68\x14\x48\xe6\x30\x10\x7d\xed\x71\x79\x46\x9e\x5d\xbf\x91\x28\xde\x2b\x94\x2a\xfe\x52\x24\x94\xde\x91\x5d\xce\x23\x78\x2f\xe5\xc4\x32\xf3\x31\xf7\x9c\x37\x58\x12\xf7\xdc\x9b\xfc\xaa\x0e\x81\xe1\xe4\xe6\x17\xaf\x33\x37\xe8\x06\x4b\xd5\x7f\xb9\x49\x56\xe5\x60\x05\xc8\xa4\x7a\xef\xe8\x1d\x42\x76\x35\x7c\x6d\x91\x6d\x59\x1c\xc9\x17\x91\x7e\x16\x8d\x91\xbb\x8d\x3f\x92\x21\x32\x67\x1a\x3f\x84\x8c\xaa\x84\x82\x4b\x63\x04\xc9\xe3\x88\x33\xdc\xc6\xa2\xf4\x7a\xb6\x88\x65\x48\x76\xb9\x15\x49\x3f\xf1\x51\xf2\x5d\x83\x68\xe5\x55\x09\x4f\x2f\x3e\x7f\x8c\xdf\x6a\x29\xa5\x64\x65\x54\x29\xd1\x49\x0f\x14\x92\x64\x99\xdf\xb8\x7d\x6b\xbe\x35\x5d\x89\x16\xd9\x90\x32\x96\x7a\x67\xa3\x80\xca\xf8\x7d\xd7\x6a\x77\x8e\x8e\x5f\xbf\x79\xab\x3d\x18\x8e\xd1\xab\x88\x99\x1c\x30\x86\x41\x18\x7f\x72\xe3\xad\xea\xbc\xe6\xe9\x2a\x95\xe9\x98\x4b\x54\x37\x7f\x35\x6c\xc6\x35\x9f\x84\x8a\xc3\x10\x19\x12\xa1\xb3\x67\x7b\x0a\xae\xbd\x81\x5e\xeb\x97\xe7\x5f\xce\x2f\xa1\x93\x44\x04\x16\xfa\x36\x8a\xeb\xc1\xc5\xcd\xdd\x2c\x8b\xd9\xa8\x57\x12\xed\x5c\x32\x87\x8b\x85\x54\xad\x8c\x2a\xb7\xae\xaa\xd3\xbe\xd2\x02\xf2\xd2\xcb\xa6\xfa\xff\x05\xaa\x9a\x97\x7e\xf1\x46\x67\x75\xf9\x97\x5f\xeb\x5c\xa9\x17\x69\x42\xe7\xb6\x6c\x7e\x6f\xb4\xb3\xb4\x05\xa3\xd5\x7f\x39\xc3\x5d\x4d\x1d\xfd\x80\x40\xa2\x4c\x53\xfa\xac\x0c\xe1\x63\x2b\xc5\xb0\xe0\x5e\xe5\x09\x9b\xef\x94\x24\x7a\x31\xf7\xf8\x66\x29\x6d\xce\xbd\x12\x38\x64\xe9\xbb\xb9\xf7\x57\x8d\x6a\x40\x3c\x89\xb1\x89\x7c\xcd\x8a\x4f\x7b\x3b\x79\xd1\x76\x12\xa1\xa1\x90\x3f\x54\x41\x44\x5c\x11\xdf\x15\x2a\x24\x3a\x02\xe7\xec\x73\xd1\x82\x1d\x7b\x70\xd4\xea\x1c\xbd\xb1\xed\xd6\xbb\x37\x6f\x07\xaf\x07\x9d\xb6\xf5\xf6\x8d\xdd\x76\x06\x56\x0b\x3b\xc7\xad\x44\x0c\xd1\x5d\xd4\x27\x23\x84\x07\x76\x19\x99\x67\x7b\x02\xb2\x59\xc7\xea\x13\x37\x9c\xdd\x52\x7c\x96\xcb\xac\xc7\x11\xae\x9e\xc5\x80\x34\xc6\xad\xcc\x6b\x0b\x47\x60\x87\x60\xea\x51\xb9\xe7\x31\xf1\xc2\x45\xbb\x9b\x8a\x32\x2a\x8a\xa3\x9d\x60\x3c\x19\x68\x2d\xea\x44\x98\x66\x5a\x6b\x26\xa2\x85\x43\xcf\xca\x40\x58\x19\x20\xab\xe6\xec\x4f\x4c\x5a\xa6\x23\x5d\x03\x84\x6d\xab\xf5\xf6\xd0\x7a\x77\xd8\x3e\xbe\x6d\xb5\xba\x9d\x4e\xf7\xe8\x6d\xc3\xb2\xac\x7a\xb9\xa0\x7a\xfd\xeb\x33\xa2\x30\xaa\x22\xf8\x15\xb1\xca\x27\x0c\xc5\xdd\x0c\x60\xcd\x11\xea\x2d\x4d\x77\x67\x02\x89\x4c\x37\xe7\xb9\x5d\x5b\xb6\x4f\x2f\x16\x00\x9c\x11\x11\xc3\xb4\x93\xe0\x7a\xf4\xab\x8c\x8c\x0a\xfb\xca\xec\x98\xe2\xe7\x41\xc8\x5c\xca\x86\x7d\x1e\x0a\x67\x86\xaa\xef\x8c\xd0\x0d\xbd\xe4\xad\x12\x84\x32\xca\x86\xa6\x90\x56\xe8\x5f\x68\x39\xa3\xf2\xbe\x4f\x7f\xcc\xb6\x9d\xb3\x31\x15\x9c\xf9\xc8\x92\xba\x03\x0b\xfd\x8b\x9b\x3b\x19\x3f\x79\x84\x0d\x43\x92\x4e\x1c\xff\x08\xd0\x51\xa9\x18\x1e\x7a\x43\x5a\xd0\xcc\xf6\x7c\x66\xa6\xdc\x5f\x0e\x43\x58\x18\x77\x17\x66\x5b\xe5\x2c\x0f\x2c\xa0\x12\x04\x6a\x44\xfc\x06\x2d\xfd\x40\x59\xc4\xf9\x37\x68\xeb\xc7\xe8\x21\x2b\xb8\x6b\xbc\x56\x5e\xdf\xed\x08\x13\xbc\x01\xc3\xac\xd0\xbb\x56\xc0\xd0\xe9\x70\xfd\xa7\x33\x4c\xd8\xa4\x6c\xd7\x9a\x4d\xe3\x23\xfb\x9b\x65\x31\x53\x31\x2f\x3f\x2a\x88\x40\x5f\x76\xda\x50\x56\xbf\xcf\x1c\xdc\x71\xa1\x78\x4f\x1c\x15\x12\x6f\x7d\x2e\xd9\xd6\x30\xe7\x35\x2a\xab\xc0\xfc\x3c\xe0\x4d\x44\x98\xa8\x22\xf5\x35\x55\xb9\x50\x61\xe7\xac\xa5\xe0\x9a\x56\xb2\xf0\x03\x12\x4d\xe4\xe3\xe7\x8f\xf5\xe2\x42\x12\x47\xb6\x91\x52\xa4\x22\x42\x69\xa3\x2a\x93\x68\xc9\xc9\x4d\xe2\x0e\xdc\xcc\x0e\x67\x65\x95\xd8\xb4\xd5\xca\x9f\xe1\x20\x73\x7f\xcd\x30\x9d\xd4\x5b\xf8\xda\x41\x9f\x08\x67\x44\x15\x3a\x2a\x14\x6b\xa8\xf7\xea\xaa\xc0\xe4\x92\x4c\xe7\xd5\xba\x30\x04\x77\x12\xb7\x2a\x2b\x0f\x78\x67\x87\x4c\x85\xd0\x7a\xdd\xb0\x8e\x92\x91\x87\x41\x68\x42\x4c\xf5\x9a\xdb\x97\xde\x59\xef\x04\x6e\x51\x7a\x04\xbe\xb4\x32\xb7\x89\x01\x77\x46\x6b\xf9\xe1\x16\xb8\x64\x0a\x1d\x18\xf1\x50\x14\xb8\xe8\x58\xb7\x5a\x10\x3e\x89\xea\x2f\xf1\x2b\x9b\xa8\xaa\x94\x33\x22\x2c\x89\xc2\x6b\xf9\x5a\x3e\x18\x50\x87\x78\x10\x90\x21\x82\xcb\x27\x2c\x7f\x24\x57\x1a\xc8\x37\xa9\x8f\x12\x45\x6e\x75\xe7\xaa\x33\xeb\xf9\x64\x88\xe5\xb3\x28\x1c\x43\xae\x9a\x41\x3b\x73\x62\x25\x89\x47\x75\x41\x21\x93\x5c\x0c\x3c\x3e\xc9\x55\x99\x75\xb2\x52\x41\xd1\x91\x1b\x6a\xcf\xcc\x62\x2d\x69\xf4\xc3\x00\xc5\x98\xca\x2c\x1a\x26\xd9\x51\x65\x16\x37\x53\x35\xe2\x69\x4c\xcc\xb2\xa9\x47\xe7\x02\x8f\x1e\xc4\x05\xb6\x5e\xd7\x6b\xaf\xe0\x94\xfb\x01\x67\xc8\x94\xac\x39\xe9\x47\x3d\x58\x72\xad\xa1\x9f\xfc\x3a\x2a\xe4\x6f\x35\xd4\xf2\xf3\x30\xbf\x9a\x1a\x8b\xc5\xf4\xee\x82\x6d\xba\xd6\x6a\x7f\x06\x00\x00\xff\xff\x20\x5d\xd5\xc4\x6f\x57\x00\x00")

func apiSwaggerSpecV1YmlBytes() ([]byte, error) {
	return bindataRead(
		_apiSwaggerSpecV1Yml,
		"api/swagger-spec/v1.yml",
	)
}

func apiSwaggerSpecV1Yml() (*asset, error) {
	bytes, err := apiSwaggerSpecV1YmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "api/swagger-spec/v1.yml", size: 22383, mode: os.FileMode(420), modTime: time.Unix(1543387460, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"api/swagger-spec/v1.yml": apiSwaggerSpecV1Yml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"api": &bintree{nil, map[string]*bintree{
		"swagger-spec": &bintree{nil, map[string]*bintree{
			"v1.yml": &bintree{apiSwaggerSpecV1Yml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

