// Code generated by go-bindata.
// sources:
// api/swagger-spec/v1.yml
// DO NOT EDIT!

package swagger

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _apiSwaggerSpecV1Yml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\x5b\x73\xe2\x3a\xf2\x7f\xe7\x53\x74\x65\xfe\x55\xfc\xb7\x6a\x03\x36\x24\x73\xe1\x69\xb2\x49\x26\x87\xd9\x4c\x92\x9d\x24\xb3\x5b\xb5\xb5\x35\x25\xdb\x0d\x68\x62\x4b\x3e\x92\x0c\x87\x39\xb5\xdf\x7d\x4b\xf2\x1d\x0c\x18\x92\x09\xb9\xc0\x43\x02\x96\xbb\xa5\xee\xfe\x75\xab\xd5\x92\x2d\x27\x64\x38\x44\xd1\x83\x66\xa7\x65\x35\x1b\x94\x0d\x78\xaf\x01\xe0\xa1\x74\x05\x0d\x15\xe5\xac\x07\xc7\x67\x5f\x7e\x83\x4f\x5c\x04\x12\x8e\xae\xfa\x0d\x80\x31\x0a\x69\x5a\xec\x96\xd5\xb2\x1a\x00\x8a\x2a\x1f\x2b\x6e\x54\x28\x02\x79\x39\xb8\x46\x31\xa6\x2e\xf6\x60\xa4\x54\xd8\x6b\xb7\x7d\xee\x12\x7f\xc4\xa5\x6a\x00\xb8\x9c\x29\xe2\x2a\xdd\x29\x00\x06\x84\xfa\x3d\xb8\x9b\xfa\xd8\x72\x3e\x52\x36\xa1\x4c\x2a\xe2\xde\xb5\x5c\x1e\x34\x00\x7c\xea\x22\x93\x18\xdf\xcb\x48\x80\x3d\x38\x0a\x89\x3b\x42\xe8\x98\x61\x00\x44\xc2\xcf\x7a\x99\x4c\x26\x2d\x62\x9a\x5b\x5c\x0c\xdb\x09\xb1\x6c\x9f\xf7\x8f\x4f\x2f\xae\x4f\xf7\x3b\x2d\xab\x35\x52\x81\xdf\xd0\x23\xe9\x41\x3e\x28\x45\x86\xb2\xd7\xd8\x4f\x7b\x88\xd4\x68\x56\x23\xb7\x12\x85\x69\x40\xa6\xa8\x4b\xf4\x45\x23\x71\x4a\xa3\xdb\xab\x69\x0a\x37\x9d\xe3\x18\xfd\xca\xbb\x4c\x4b\xe9\xde\x2b\x4e\x99\x82\xdf\xa8\x54\x82\x4f\x2b\x69\xf2\x3b\xb8\x98\x96\x68\xb5\x41\x2a\x49\x74\x83\xb9\xf3\x8d\xfe\x0b\xd7\xee\x08\x03\x94\x0d\x19\xff\xd7\x1a\xd0\x9a\x6c\x84\x44\x8d\xa4\xd6\xf9\x5e\x9b\x44\x6a\xd4\xf6\xf9\x90\xb2\xbd\xd8\x08\xa1\x56\x9d\xf9\x06\x10\xab\x2d\xfe\xbe\x9f\xaa\x4d\x7f\x64\x14\x04\x44\x4c\x7b\xd0\x34\xdd\x1a\xfa\x66\xd2\xe6\x72\x26\x23\xd3\x5b\x4a\x48\xc2\xd0\x4f\x74\xda\xfe\x21\x39\x4b\x1a\x42\xc1\xbd\xc8\xad\x73\x23\x11\x24\x40\x85\xa2\x70\x2b\x65\x3d\x70\xb8\x37\x4d\x2e\xa4\xe0\x29\x5d\x12\xf8\x7b\x44\x05\x7a\x3d\x50\x22\xc2\xec\xb2\xd1\x06\xe9\x65\xbf\x01\xf6\xfe\x4f\xe0\x60\xaf\x07\x7b\x6f\xda\x1e\x0e\x28\xa3\x7a\x04\x32\x51\x4b\x23\x65\x26\x43\xae\xd1\x96\x13\x36\x3b\x96\xd5\x2c\xf2\x29\x19\xa4\x79\x1d\xb9\x2e\x4a\xd9\x2c\xdc\x30\xdf\x35\x80\x9a\x86\xd8\x03\xee\xfc\x40\x57\x95\x1a\x42\xc1\x43\x14\x8a\x16\xbb\x8c\x3f\x01\x4a\x49\x86\x38\x7b\x39\xe5\x25\x95\xa0\x6c\x38\xd7\x88\x7f\x90\x20\xd4\x4e\xdd\xbc\xbc\x6b\xce\xb4\xba\xdc\x5b\xc8\x8e\x32\x85\x43\x83\xfe\x05\xfc\x3a\x96\x35\xd3\xe8\x11\x45\x16\xb1\xab\x90\x74\xb9\xb4\x86\x94\xdf\x21\xab\x6a\x58\x21\x73\x59\x6e\x9c\x7e\x1e\x39\x67\x2e\xbd\xa4\x9f\xfb\xb7\x3f\xfb\xf6\x05\xed\xcb\x3e\xfb\x7a\xe8\x1e\xf7\xdf\xf6\xef\xc2\x7f\x7d\x3b\xfe\xfc\xa1\x85\xd3\xcf\xbe\xf3\xcf\x4f\xa1\x93\xeb\xa8\x79\xb0\xd4\xd0\x7d\x36\x26\x3e\xf5\xe0\x54\xc7\x3a\xe0\x02\xae\x88\x94\x13\x2e\xbc\x12\x87\xee\x12\x0e\xc6\x8b\x18\x57\x40\x5c\x45\xc7\x44\x61\x91\xf4\x70\x45\xe7\x0a\x05\x23\x3e\xe8\x90\x8c\x02\x4e\x85\xe0\xa2\x99\xfb\xb6\xc0\x21\x95\x0a\xc5\x66\xee\xfd\x35\xa1\x06\x86\x13\x88\x24\x8a\x97\xe7\xe5\x99\x82\x76\x8e\xbe\x8e\xa3\xd7\xf4\x89\x2b\x32\xf5\x39\x79\x48\x38\x4b\x54\x29\x96\xa3\xf5\xa0\x2c\x51\x81\x1a\xa1\xc1\x31\x84\x33\x3e\xfa\x92\x00\xad\x55\xf4\xf2\xd0\xcc\xef\xb6\x8c\x65\x4c\xe3\x3b\xf7\xbd\x39\xfc\xdc\x1b\xd9\x03\x2e\x5c\x5c\x1b\xde\xe8\x46\x82\xaa\x69\xde\xed\x3e\xfc\x0d\x89\x40\xa1\x6f\xea\xc1\xbf\x8f\xbc\x80\xb2\xff\xcc\x39\xc3\x27\xdd\x19\x88\xd7\xe2\x12\x05\xdd\xee\xfc\x62\xeb\xc9\x5c\x8a\xb3\x87\xc8\xe7\x36\x4c\xd5\x7e\x9d\x2b\x87\xb4\x3d\xb6\xdb\xda\x9f\x12\x37\x1e\xe2\x02\x37\x4e\x96\x94\x50\x72\xcc\x73\x2a\x15\x10\xdf\x37\x1e\x99\x81\x6d\x3d\x37\x5f\x1b\xdb\x09\xb4\x77\xc8\x2e\xb0\x23\x42\x90\xe9\x5c\x1b\x55\x18\x54\x62\x7a\x41\xe0\x31\x38\x28\x82\xd3\x5e\xb6\x0a\x60\x7a\x22\xe0\x82\xfe\x7c\x88\xfc\x7f\xc9\x04\x52\x89\xbc\xdb\xd0\x23\x0a\x4b\x49\x7e\x55\xb8\x8e\xa3\xb3\xd6\x5c\x36\xa4\xb9\x08\x7e\xdf\x70\xad\xc7\xf0\x5d\xaf\x54\x36\x8e\xd6\x97\x7f\x7f\x72\x60\x8e\x17\x79\x23\x22\xc1\x41\x64\x10\x19\x75\x7b\x5b\x59\x88\xd7\x05\xeb\xaa\x48\x4a\xfd\xaa\x04\xff\x71\x41\xee\xa1\x8f\x0a\xd7\xc0\xf9\x89\x21\x28\xe1\x7c\x65\x78\x25\xc5\xf0\xfa\xcb\xbd\x62\x23\x74\x46\x11\xad\x98\x50\xeb\x41\x33\xb2\x2c\xcb\xb2\x5f\x92\xaf\xf1\xad\x2e\x7c\xb7\xef\x17\xa5\x44\xa4\xfd\xa7\x06\xc7\x7f\x37\xc9\x47\xce\x50\xc5\x6b\x03\x67\x6a\x10\xb6\xcb\x30\x1e\x33\xfe\x6e\x09\x2f\x52\x11\x15\xc9\x55\xab\xd0\xca\xe0\x7a\x9d\xe2\x25\xe6\xf1\xff\xa6\x9e\x89\x6d\xc7\xe7\xee\xdd\x5f\x1e\x2e\xdc\x3e\xc6\x9a\xd1\x24\x21\x89\x2a\x1e\x20\x34\xd6\x5c\x98\x9c\x10\x45\x9e\x42\xcc\x10\xdc\xc7\x8d\x10\x50\x48\x23\x41\x33\x79\x86\x46\x37\xb2\xbf\x3e\x93\xfb\x38\x46\xff\xde\x36\x37\x5c\x9e\xa1\xd1\x63\xe9\x5f\x9f\xd5\x43\x4e\xd9\xca\x8a\xe3\x4a\xab\x1b\x2e\xcf\xd0\xea\xb1\xf4\xaf\xcb\xea\x45\x3f\x5f\x98\x0c\xa6\x47\x19\xa0\xba\x3a\x65\x78\xd4\x2f\x4f\x91\x5d\x79\xea\x49\x96\xa7\x4a\x41\xef\xf1\xeb\x53\x0b\xf7\xa2\xab\xd1\x77\x2c\x50\x07\x1c\x86\x93\x18\x7f\x46\x41\xcf\x2b\xe8\xbc\xa2\x59\x66\xc9\x74\x52\x6d\xde\x64\x3e\xd9\x99\xf6\x19\x98\x76\x59\xd5\xad\xda\xba\x49\xd9\x6d\x67\xdd\xc7\xb3\xee\x81\x75\xb0\x84\xe8\x82\x2b\xf8\xc4\x23\xf6\xe0\xa9\x45\xfb\xcf\x1a\xc5\xa6\x4a\x90\x9c\xa1\x4a\x00\xe2\x4c\xa1\x7f\xb2\xcb\x17\x7e\x61\xb1\x69\x9b\x53\x7f\x86\x17\x93\x7e\x8f\xe2\x13\xae\xab\x10\x33\x7b\x60\x16\xaa\x33\x53\xc3\x12\x12\x9e\xcb\x36\xb2\x74\xd4\xf8\x3d\x42\x31\x1b\x36\xf4\xba\xe0\xf6\x36\x43\xdf\x02\xe3\x96\x25\xfd\x87\xe6\x63\x6a\xa4\x7a\x31\x14\x45\x34\x53\xd2\x0e\xbc\x95\xdc\xb6\x91\xec\x1a\x64\x7c\x4f\xd1\xb6\x65\xe4\x0f\xb8\x08\x56\x21\x3e\x39\xe6\x0d\xd5\x40\xd7\x1c\xe4\x0e\xe0\xf9\xe7\xd5\x03\xdc\x60\x6a\x6b\xc9\xfe\xc2\xc5\x5c\x25\x8c\x93\xb5\x1c\x31\x30\xde\xf6\x79\x83\xa2\xe2\x5e\xc2\xf6\xe7\x93\x4a\x34\xe6\x50\xf9\xf4\x77\x4f\x97\x2c\x5d\x2b\xc1\x9c\xac\x5c\x77\x60\xde\x81\xf9\x29\x82\x79\xd9\x62\xbd\x12\xcf\xc9\x5a\xbd\x8c\xe7\x97\x70\x48\x66\x77\x44\xe6\x49\xa4\x3b\x33\x72\x3e\x0b\x37\x2a\x65\xee\xb5\x4a\x1c\x55\xae\x75\x86\xca\x38\xd5\xae\xc0\xf1\xf8\xa1\x7a\x4b\x58\xa9\x77\x9a\x66\x59\x5e\x61\x00\x13\xb3\x79\x5e\x45\x53\x3d\xf0\x57\x74\x84\xe6\x0d\x7c\xe1\x1e\xfa\x70\x92\xab\xa0\x51\x50\x87\xe6\x67\x1e\x29\x8e\x19\xcf\xb9\x67\xa6\xed\x46\x6c\x21\xf3\x8c\x42\xf2\x3d\x7d\x44\x21\x06\xd1\x9c\xff\xc6\x4f\xd9\x67\xe3\xad\xf4\xd6\x7c\x2a\x93\x28\x3e\x2a\x94\x2a\x79\x06\x1f\x2a\x1f\xc9\x58\xce\x23\xfc\x28\xe5\xc4\x32\xe3\x31\x8f\xd5\x6c\x20\x12\xf7\xbd\xab\xa2\x54\xfb\xc0\x70\x72\xf5\x8b\xe5\x2c\x74\xba\x81\xa8\xfa\x53\x18\x64\x5d\x0e\x56\x88\x4c\xaa\x8f\xae\x8e\x8e\xf9\x93\x48\x6b\xab\xec\x81\xd5\x91\x3e\xf7\x7a\x5f\x34\xc6\x79\x5d\xf2\x95\x0c\x91\xb9\xd3\xe4\x47\xc4\xa8\x4a\x29\xb8\x34\x4e\x90\xfe\x1c\x71\x86\x0f\x21\x94\x96\xe7\x01\xb1\x0c\x69\x1c\xac\x49\xfa\x99\x8f\xd2\x47\xdb\x62\xc9\xeb\x12\x1e\x9f\x7d\xf9\x2d\xb9\xaa\xb5\x94\x91\x55\x51\x65\x44\x47\x7d\x50\x48\x52\x31\x7f\x70\xe7\xc6\xbc\xa4\xa3\x16\x2d\xb2\x21\x65\x2c\x9b\x6e\x8d\x01\x6a\xe3\xf7\x83\xdd\xe9\x1e\x1c\xbe\x7d\xf7\x5e\x47\x30\x1c\xa3\x5f\x13\x33\x05\x60\x0c\xc3\xe8\x4a\x50\x37\xfd\xe9\x91\x69\xfe\x73\x1e\x03\xb4\xb6\xf1\xfc\xb1\x4e\xcc\xbb\x59\x43\x29\x50\x1f\x45\x8a\xc3\x10\x19\x12\xa1\xe7\x51\x67\x0a\xd2\x04\xec\x0d\x2c\xdd\x3c\x3f\xfd\x76\x7a\x0e\xdd\x74\x8e\x48\xe5\x99\xa5\x9f\xcd\x6a\x2a\xb2\x99\x54\xf6\xda\xa4\x76\x4e\x5a\x90\xae\xee\xc0\x2f\xb8\x08\x88\x9f\x3d\xef\xa0\xff\x2f\x30\xdf\xbc\x1d\xca\x0f\x15\x54\x76\xa4\xe7\x78\xa2\x7a\xc5\xd3\xe1\x8b\x96\x4d\xeb\x59\xe7\xde\x71\x60\xe7\xc8\xb3\xb4\x25\x47\xd6\x9f\x82\x33\xaf\xa6\xde\x8b\x5f\x62\x63\xef\x15\x89\xfb\x27\xeb\x79\x6a\x8a\x05\xb3\x19\x53\xdb\x03\x0e\xad\xcc\x05\x04\xf7\x6b\xcb\x6b\x9e\x8a\x4c\xcd\x6a\x4e\xa2\xcf\x52\x3a\x9c\xfb\x15\x68\xca\xb3\x5d\x73\x72\xbd\x1e\xd5\x80\xf8\x12\x13\x0f\xfb\x9e\x97\xc3\x77\x6e\xf6\xaa\xdd\x2c\x46\x43\x29\x25\xa9\x83\x88\x64\x8f\x6e\x5b\xa8\x90\xe8\x0a\x9c\xf3\xcf\x45\x02\xbb\xce\xe0\xc0\xee\x1e\xbc\x73\x1c\xfb\xc3\xbb\xf7\x83\xb7\x83\x6e\xc7\x7a\xff\xce\xe9\xb8\x03\xcb\xc6\xee\xa1\x9d\xaa\x21\x5e\x0a\x3e\x1b\x25\x3c\x72\xc8\xc8\x23\xdb\x33\xd0\xcd\x26\x61\x38\x3f\x67\xff\xd0\x62\x3e\x84\x44\x1b\x4f\x67\xf9\x41\xf2\x9a\x69\x71\x69\x03\x7e\x1f\x4c\xa9\xa6\xf0\x7b\x4c\xfc\x68\x51\x62\xbc\x91\x3e\x3a\x29\x9e\xd3\x8e\x36\xd2\xa6\x19\xd6\x9a\x39\x6b\xe9\xc8\x45\x6d\xa3\xaf\x9c\x0c\x57\x98\xd5\x73\x9e\xa7\xb6\xcc\x8d\x74\x8d\x35\x49\xc7\xb2\xdf\xef\x5b\x1f\xf6\x3b\x87\x37\xb6\xdd\xeb\x76\x7b\x07\xef\x5b\x96\x65\x35\xab\x15\xd5\xbf\xbe\x3c\x21\x0a\xe3\x22\x44\xb0\x19\x56\x93\x77\x3b\x5e\xe4\x0b\xbb\xe4\xca\x69\xa1\x3c\x90\x5c\xba\xca\x16\xf9\xfb\xda\xc8\xba\x8b\x02\x1d\x15\x4e\xc6\x75\x10\x31\x8f\xb2\xe1\x35\x8f\x44\xb6\x42\x54\x82\x50\x46\xd9\xd0\x94\xd4\x16\xb7\x9c\x50\x79\x77\x4d\x7f\xce\xb6\x9d\xb2\x31\x15\x9c\x05\xc8\xd2\x0a\x04\x8b\x02\x07\xc5\xe5\xe0\xec\xea\x36\xb9\xe2\x13\x36\x8c\xc8\x70\x66\x88\xd7\xee\x08\xbd\xc8\x4f\xaf\xe2\x1f\x21\xba\xea\x86\x66\xe3\x16\x48\x64\x56\xc7\x70\x47\x44\x0c\xef\xbf\x88\x75\x89\xdd\xe9\xda\x07\xb6\x47\xdc\xda\xb1\x6b\x5d\x90\xd7\x98\x09\x52\xe4\x17\x8c\x5c\x1b\x8a\x3a\xb3\x6b\x96\xe9\x4f\xd7\xad\x4e\xd9\xb3\xa9\x65\x11\x48\x1b\xaf\x71\x0a\xd0\xab\x2d\x8d\x79\xed\xe9\x55\x4c\x98\x4a\x65\x00\x5b\x97\x03\x15\x4e\x21\x18\x94\xf0\xbd\x92\x45\x10\x92\x6c\x10\x69\xe7\x81\xc6\xfa\x91\x70\x47\x54\xa1\xab\x22\xb1\x86\x28\x17\x17\x25\x26\xe7\x64\x9a\x16\x00\x60\x75\x60\x4a\x0b\x2b\x5c\xd6\xee\xf0\xd6\x89\x98\x8a\xc0\x7e\xdb\xb2\x0e\x0a\xd5\x12\xe3\xad\xf5\x8b\x16\xdf\xfa\x27\xfd\x23\xb8\x41\xe9\x13\xf8\x66\xe7\x31\x0d\x43\xee\x8e\x6e\xd6\x09\x92\x36\x78\x64\x0a\x5d\x18\xf1\x48\x94\xb8\xe8\xb0\xb1\x5a\x11\x01\x89\x57\xa0\x69\x72\x47\x54\x5d\xca\x19\x15\x56\x04\xb4\xda\x32\xdc\x8c\x10\xf8\x60\x40\x5d\xe2\x43\x48\x86\x08\x1e\x9f\xb0\xe2\x66\x68\x65\x4c\xdc\x64\xfa\x29\xf1\x29\x6d\xb7\xad\xe2\xd1\xb1\xe6\xb8\x14\xa2\x70\x7d\x51\x91\x49\x2e\x06\x3e\x9f\xcc\xca\x76\xa3\x09\xeb\xb2\xb9\x8e\x42\x14\x63\x2a\xf3\x5d\x1d\x8f\x28\xb2\x16\x8b\x7e\x40\x86\xd9\xe3\xcb\x85\xe9\xa3\x06\x66\x62\x0f\x4e\xe3\x69\x3a\xd1\xd4\xee\xf9\x6a\xaa\x46\x3c\x0b\xa7\xf9\x14\x34\xcb\x60\x66\x6f\xb7\x7a\x5f\x57\x2a\x22\x94\x9e\xf8\x8b\x17\x97\xec\xe8\xa6\x13\x85\x17\xe7\x0a\xf9\x67\x3e\xef\xc8\x1d\xdc\xb4\x33\xef\xd7\x74\x63\xbf\x6d\x96\x63\x79\x3a\x47\x3f\x39\x7d\xd8\x8f\xa2\x8f\x6e\x16\x0d\xe3\xfc\x63\x23\x35\xc4\xa8\xaa\x1a\x5c\xd5\xc6\x7c\xee\xe6\x87\xa5\x5d\x79\xe2\xaa\x88\xf8\xeb\x73\x29\xd4\xf3\x4c\x3e\x55\xdb\x35\xbe\x46\x0c\x82\x69\x16\x13\xe2\x39\x2d\xdb\x15\x57\x25\x7d\x2f\x67\xf5\x15\x4b\x5a\x2a\xa5\x5b\x7b\x71\xe3\x5f\xa1\xcf\xe2\x22\x00\x10\xe6\xc1\x91\xf9\x9a\x95\x3f\x89\x54\xf1\x06\xfd\x5a\xd3\xd1\xa6\x39\xbb\x31\xb7\x40\xf3\x4a\xc5\x47\xe9\xb0\xb0\x79\x5f\x73\xad\xa0\x29\xb2\x9c\xde\xd8\x62\x41\x66\x1c\xdf\x78\x8f\xec\xf8\x91\x0c\xfd\x06\x8e\x79\x10\x72\x86\x4c\xc9\x86\x9b\x7d\xd5\x1d\xa7\x07\x30\xae\xd3\x57\xab\x43\xf1\xfc\x45\xa3\x38\x2e\xf3\xca\xf5\x64\xdc\xe6\xee\x1e\x38\xe6\xd6\x46\xe3\x7f\x01\x00\x00\xff\xff\x1d\xf1\xa1\x5e\xac\x5f\x00\x00")

func apiSwaggerSpecV1YmlBytes() ([]byte, error) {
	return bindataRead(
		_apiSwaggerSpecV1Yml,
		"api/swagger-spec/v1.yml",
	)
}

func apiSwaggerSpecV1Yml() (*asset, error) {
	bytes, err := apiSwaggerSpecV1YmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "api/swagger-spec/v1.yml", size: 24492, mode: os.FileMode(420), modTime: time.Unix(1543563690, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"api/swagger-spec/v1.yml": apiSwaggerSpecV1Yml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"api": &bintree{nil, map[string]*bintree{
		"swagger-spec": &bintree{nil, map[string]*bintree{
			"v1.yml": &bintree{apiSwaggerSpecV1Yml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

